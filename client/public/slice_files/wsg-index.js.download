(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
module.exports={
  "text": {
    "signupLoginReset": {
      "applyH1": "Apply for a Wholesale Account",
      "loginH1": "Wholesale Customer Login",
      "loginLinkA": "Already have an account?  Login here.",
      "signupLinkA": "Need an account?  Sign up here.",
      "customerInfo": "Customer Information",
      "labelFirstName": "First Name",
      "labelLastName": "Last Name",
      "labelEmail": "Email",
      "labelCompany": "Company",
      "labelTaxId": "Tax ID, ABN, or VAT Number",
      "labelPhone": "Phone Number",
      "labelWebsite": "Website",
      "labelNotes": "Notes",
      "shipAddress": "Shipping Address",
      "labelAddress1": "Address 1",
      "labelAddress2": "Address 2",
      "labelCity": "City",
      "labelCountry": "Country",
      "labelState": "State/Province",
      "labelZip": "Zip/Postal Code",
      "labelPassword": "Password",
      "resetPasswordH2": "Reset your password",
      "resetPasswordNote": "We will send you an email with instructions on how to reset your password.",
      "cancelButton": "Cancel"
  },
    "signupPendingSignupActive": {
      "accountCreated": "Account Created!",
      "checkYourEmail": "Check your email for an activation link so you can create a password and start shopping.",
      "accountInVerification": "Keep an eye on your email.  As soon as we verify your account we will send you an email with a link to set up your password so you can start shopping."
    },
      "cart": {
        "spofLinkButton": "Quick Order Form",
        "cartCheckoutButton": "Checkout",
        "requirementsWarning": "Order Requirements Not Met",
        "requirementsSeeBelow": "See below for details.",
        "cartTitileH1": "Your Cart",
        "labelQuantity": "Quantity",
        "labelTotal": "Total",
        "smallRemove": "Remove",
        "labelAddANote": "Add A Note To Your Order",
        "labelAddress": "Address",
        "labelSubtotal": "Subtotal",
        "returnToCartLink": "Return To Cart",
        "confirmShipAddress": "Please confirm your Shipping Address",
        "warningCompany": "Please enter your store name.",
        "warningAddress": "Please enter an address.",
        "warningCity": "Please enter a city",
        "warningCountry": "Please select a country",
        "warningZip": "Please enter a postal/zip code.",
        "cartSummary": "Cart Summary",
        "labelTaxes": "Taxes",
        "textCalcAtCheckout": "Calculated at checkout",
        "labelShipping": "Shipping",
        "textCalcNextStep": "Calculated next step",
        "textCartEmpty": "Your cart is currently empty",
        "textBackordered": "Your order contains backordered items.",
        "textViewItems": "View Items",
        "textShipPartial": "Ship Partial",
        "msgShipPartial": "Ship all in-stock items now, send the rest when they become available.",
        "textShipComplete": "Ship Complete",
        "msgShipComplete": "Wait to send my order until all items are available to ship.",
        "backorderedItems": "Backordered Items",
        "close": "Close"
    },
      "draftNet": {
        "netTitle": "Thank you for your order!",
        "internationalChkoutTitle": "Thank you for your order!",
        "addingDiscount": "Adding wholesale discounts, please wait...",
        "problemProcessing": "Oops, there was a problem processing the order..."
    },
      "spof": {
        "showVariants": "[+]  Show Variants",
        "hideVariants": "[ - ]  Hide Variants",
        "cartUpdatedMsg": "Cart Updated",
        "viewCart": "View Cart",
        "noProducts": "No products to display",
        "noProductsInView": "There are no products in this view.",
        "outOfStock": "Out-of-stock",
        "backordered": "Backordered",
        "backorderedShips": "Backordered - Ships"
    }
  },
    "general": {
      "viewQuickLink": "View Quick Order Form",
      "logInToView": "Log in to view",
      "logInForProduct": "To view this product log in to an approved account.",
      "buttonLogin": "Log In",
      "ships": "Ships ",
      "restrictedItemsInCart": "Restricted items in cart",
      "restrictedMessage": "Some items in your cart are only available for approved wholesale customers.  If you are an eligible customer you can log in to your account to continue. Otherwise you will need to click 'Remove items' below to continue shopping.",
      "restrictedItems": "Restricted items:",
      "buttonRemoveRestricted": "Remove Items"
  },
    "minimums": {
      "requirementsNotMet": "Order requirements not met.",
      "eachItemMultiple": "Each item in cart must be a multiple of ",
      "maximumOf": "Maximum of ",
      "forEachItem": " for each item in cart",
      "minimumOf": "Minimum of ",
      "totalItemsFrom": " total items from ",
      "currentTotal": ". Current total: ",
      "totalCurrentTotal": " total items.  Current total: ",
      "totalItemMultiple": "Total items in cart must be a multiple of ",
      "cartMinimum": "Cart must have a minimum of ",
      "cartSubtotal": "Cart subtotal must be at least ",
      "totalLessThan": "Total items in cart must be less than ",
      "singleMinimumOf": ": minimum of ",
      "mustBeMultiple": ": must be a multiple of ",
      "perItemIn": " per item in ",
      "eachItemIn": ": each item in ",
      "singleMaxOf": ": maximum of ",
      "seeAll": "See All",
      "totalItemsIn": "Total items in "
  },
    "placeholders": {
      "placeFirstName": "First Name",
      "placeLastName": "Last Name",
      "placeEmail": "Email",
      "placeCompany": "Company",
      "placeTaxId": "Tax ID/ABN/VAT Number",
      "placePhone": "Phone Number",
      "placeWebsite": "Website",
      "placeNotes": "Tell us a little about yourself so that we can verify your business identity.",
      "placeAddress1": "Address Line 1",
      "placeAddress2": "Address Line 2",
      "placeCity": "City",
      "placeZip": "Zip/postal code",
      "placePassword": "Password",
      "forgotPasswordLink": "Forgot your password?"
  },
    "valueAttrs": {
      "continueButton": "Continue",
      "signinButton": "Sign In",
      "valueSubmit": "Submit",
      "updateCartButton": "Update Cart"
  },
  "alertEmailTaken": "An account with this email already exists. Log in with this email address or contact us for help.",
  "alertErrorProcessing": "There was an error processing your request.  Please verify all fields are correct and try again.\n\n",
  "alertErrorProcessingDraft" : "We're sorry, there was an error processing your draft order.  Please try again.  If the problem persists please let us know.",
  "alertShippingError" : "There was a problem calculating your shipping, please verify all fields are correct and try again.\nIf the problem persists please contact us for assistance.",
  "alertOrderProcessingError" : "We're sorry, there was an error processing your order.  Please try again. \n\nIf the problem persists please contact us. \n\n",
  "alertInventoryError" : "`There is not enough inventory to fill some items in your cart. Items will be updated to our maximum available quantity.\n ${itemsChanged}`",
  "quantity" : "Quantity: ",
  "only" : "only ",
  "available": " available",
  "alertRemoving": "Some items in your cart are not available for wholesale customers. The following items will be removed: \n"
}
},{}],2:[function(require,module,exports){
module.exports={
  "text": {
    "signupLoginReset": {
      "applyH1": "Ouvrir un compte Revendeur",
      "loginH1": "Connexion Revendeur",
      "loginLinkA": "Vous avez déjà un compte? Connectez-vous ici.",
      "signupLinkA": "Besoin d'un compte? Inscrivez-vous ici.",
      "customerInfo": "Informations Client",
      "labelFirstName": "Prénom",
      "labelLastName": "Nom",
      "labelEmail": "Email",
      "labelCompany": "Entreprise",
      "labelTaxId": "Numéro d'identification de TVA",
      "labelPhone": "Numéro de téléphone",
      "labelWebsite": "Site Internet",
      "labelNotes": "Notes",
      "shipAddress": "Adresse de livraison",
      "labelAddress1": "Adresse 1",
      "labelAddress2": "Adresse 2",
      "labelCity": "Ville",
      "labelCountry": "Pays",
      "labelState": "Etat / Province",
      "labelZip": "Zip / code postal",
      "labelPassword": "Mot de passe",
      "resetPasswordH2": "Réinitialisez votre mot de passe",
      "resetPasswordNote": "Nous vous enverrons un courrier électronique avec les instructions pour réinitialiser votre mot de passe.",
      "cancelButton": "Annuler"
    },
    "signupPendingSignupActive": {
      "accountCreated": "Compte créé!",
      "checkYourEmail": "Vérifiez votre courriel pour un lien d'activation afin que vous puissiez créer un mot de passe et commencer à magasiner.",
      "accountInVerification": "Gardez un œil sur votre email. Dès que nous aurons vérifié votre compte, nous vous enverrons un e-mail avec un lien vous permettant de configurer votre mot de passe pour que vous puissiez commencer à magasiner."
    },
    "cart": {
      "spofLinkButton": "Formulaire de commande rapide",
      "cartCheckoutButton": "Caisse",
      "requirementsWarning": "Exigences de commande non remplies",
      "requirementsSeeBelow": "Voir ci-dessous pour plus de détails.",
      "cartTitileH1": "Votre Panier",
      "labelQuantity": "Quantité",
      "labelTotal": "Prix Totall",
      "smallRemove": "Retirer",
      "labelAddANote": "Ajouter une note à votre commande",
      "labelAddress": "Adresse",
      "labelSubtotal": "Sous-total",
      "returnToCartLink": "Retour au panier",
      "confirmShipAddress": "Veuillez confirmer votre adresse de livraison",
      "warningCompany": "Veuillez entrer le nom de votre magasin.",
      "warningAddress": "Veuillez entrer une adresse.",
      "warningCity": "Veuillez entrer une ville",
      "warningCountry": "Veuillez sélectionner un pays",
      "warningZip": "Veuillez entrer un code postal.",
      "cartSummary": "Résumé du panier",
      "labelTaxes": "Taxes",
      "textCalcAtCheckout": "Calculé à la caisse",
      "labelShipping": "Livraison",
      "textCalcNextStep": "Calculé à la prochaine étape",
      "textCartEmpty": "Votre Panier est actuellement vide",
      "textBackordered": "Votre commande contient des articles en rupture de stock.",
      "textViewItems": "Voir les articles",
      "textShipPartial": "Livraison partiel",
      "msgShipPartial": "Expédiez tous les articles en stock maintenant, envoyez le reste dès qu'ils sont disponibles.",
      "textShipComplete": "Expédition complète",
      "msgShipComplete": "Attendez d'envoyer ma commande jusqu'à ce que tous les articles soient disponibles pour être expédiés.",
      "backorderedItems": "Articles en rupture de stock",
      "close": "Fermer"
    },
    "draftNet": {
      "netTitle": "Merci pour votre commande",
      "internationalChkoutTitle": "Merci pour votre commande",
      "addingDiscount": "Ajout des escompte Revendeur, veuillez patienter ...",
      "problemProcessing": "Oups, un problème est survenu lors du traitement de la commande .."
    },
    "spof": {
      "showVariants": "[+]  Afficher les variantes",
      "hideVariants": "[ - ]  Masquer les variantes",
      "cartUpdatedMsg": "Panier mis à jour",
      "viewCart": "Voir le panier",
      "noProducts": "Aucun produit à afficher",
      "noProductsInView": "Il n'y a pas de produits dans cette vue.",
      "outOfStock": "En rupture de stock",
      "backordered": "Bientôt disponible",
      "backorderedShips": "Bientôt disponible - Expédié le "
    }
  },
  "general": {
    "viewQuickLink": "Voir le Formulaire de Commande Rapide",
    "logInToView": "Connectez-vous pour voir",
    "logInForProduct": "Pour afficher ce produit, connectez-vous à un compte approuvé.",
    "buttonLogin": "S'identifier",
    "ships": "Livraison ",
    "restrictedItemsInCart": "Articles restreints dans le panier",
    "restrictedMessage": "Certains articles de votre panier ne sont disponibles que pour les clients grossistes approuvés. Si vous êtes un client éligible, vous pouvez vous connecter à votre compte pour continuer. Sinon, vous devrez cliquer sur 'Supprimer les éléments' ci-dessous pour continuer vos achats.",
    "restrictedItems": "Articles restreints:",
    "buttonRemoveRestricted": "Supprimer les articles"
  },
  "minimums": {
    "requirementsNotMet": "Les conditions de commande ne sont pas remplies.",
    "eachItemMultiple": "Chaque article dans le panier doit être un multiple de ",
    "maximumOf": "Maximum de ",
    "forEachItem": " pour chaque article dans le panier",
    "minimumOf": "Minimum de ",
    "totalItemsFrom": " total d'articles de ",
    "currentTotal": ". Total actuel: ",
    "totalCurrentTotal": " articles au total.  Total actuel: ",
    "totalItemMultiple": "Le total des articles dans le panier doit être un multiple de ",
    "cartMinimum": "Le panier doit avoir un minimum de ",
    "cartSubtotal": "Le sous-total du panier doit être d'au moins ",
    "totalLessThan": "Le total des articles dans le panier doit être inférieur à ",
    "singleMinimumOf": ": minimum de ",
    "mustBeMultiple": ": doit être un multiple de ",
    "perItemIn": " par article en ",
    "eachItemIn": ": chaque article dans",
    "singleMaxOf": ": maximum de ",
    "seeAll" : "Voir tout",
    "totalItemsIn": "Total articles dans "
  },
  "placeholders": {
    "placeFirstName": "Prénom",
    "placeLastName": "Nom",
    "placeEmail": "Email",
    "placeCompany": "Compagnie",
    "placeTaxId": "Numéro d'identification de TVA",
    "placePhone": "Numéro de téléphone",
    "placeWebsite": "Site Internet",
    "placeNotes": "Parlez-nous un peu de vous pour que nous puissions vérifier l'identité de votre entreprise.",
    "placeAddress1": "Adresse 1",
    "placeAddress2": "Adresse 2",
    "placeCity": "Ville",
    "placeZip": "Zip / code postal",
    "placePassword": "Mot de passe",
    "forgotPasswordLink": "Mot de passe oublié?"
  },
  "valueAttrs": {
    "continueButton": "Continuez",
    "signinButton": "Se Connecter",
    "valueSubmit": "Soumettre",
    "updateCartButton": "Mise à jour panier"
  },
  "alertEmailTaken": "Un compte pour ce email existe déjà. Connectez-vous avec cette adresse e-mail ou contactez-nous pour obtenir de l'aide..",
  "alertErrorProcessing": "Une erreur est survenue lors du traitement de votre demande. Veuillez vérifier que tous les champs sont corrects et réessayer...\n\n",
  "alertErrorProcessingDraft": "Nous sommes désolés, une erreur s'est produite lors du traitement de votre brouillon de commande. Veuillez réessayer et si le problème persiste, merci de nous en informer.",
  "alertShippingError": "Un problème est survenu lors du calcul des frais de livraison. Vérifiez que tous les champs sont corrects et réessayez. Si le problème persiste, contactez-nous pour obtenir de l'aide.",
  "alertOrderProcessingError": "Nous sommes désolés, une erreur s'est produite lors du traitement de votre commande. Veuillez réessayer. \n\nSi le problème persiste, contactez-nous. \n\n",
  "alertInventoryError": "`Il n'y a pas assez d'inventaire pour remplir certains articles de votre panier. Les articles seront mis à jour à notre quantité maximale disponible.\n ${itemsChanged}`",
  "quantity": "Quantité: ",
  "only": "seulement ",
  "available": " disponible",
  "alertRemoving": "Certains articles de votre panier ne sont pas disponibles pour les clients grossistes. Les éléments suivants seront supprimés: \n"
}
},{}],3:[function(require,module,exports){
module.exports={
  "text": {
    "signupLoginReset": {
      "applyH1": "Antrag auf Großhändlerkonto",
      "loginH1": "Großhandelskunden-Login",
      "loginLinkA": "Haben Sie bereits ein Konto? Bitte hier einloggen.",
      "signupLinkA": "Brauchen Sie ein Konto?  Bitte hier registrieren.",
      "customerInfo": "Kundeninformation",
      "labelFirstName": "Vorname",
      "labelLastName": "Familiennamee",
      "labelEmail": "Email",
      "labelCompany": "Unternehmen",
      "labelTaxId": "Steuer-ID, ABN oder Umsatzsteuernummer",
      "labelPhone": "Telefonnummer",
      "labelWebsite": "Webseite",
      "labelNotes": "Anmerkungen",
      "shipAddress": "Lieferadresse",
      "labelAddress1": "Adresse 1",
      "labelAddress2": "Adresse 2",
      "labelCity": "Stadt",
      "labelCountry": "Land",
      "labelState": "Bundesland",
      "labelZip": "Postleitzahl",
      "labelPassword": "Passwort",
      "resetPasswordH2": "Passwort zurücksetzen",
      "resetPasswordNote": "Wir schicken Ihnen eine Email mit Instruktionen, wie Sie Ihr Passwort zurücksetzen können.",
      "cancelButton": "Abbrechen"
    },
    "signupPendingSignupActive": {
      "accountCreated": "Konto erstellt!",
      "checkYourEmail": "Suchen Sie in Ihren Emails nach einem Aktivierungslink, um ein Passwort zu erstellen und mit dem Einkauf beginnen zu können",
      "accountInVerification": "Achten Sie auf Ihre Emails.  „Sobald wir Ihr Konto verifiziert haben, schicken wir Ihnen eine Email zu. Damit können Sie Ihr Passwort erstellen und mit dem Einkaufen beginnen."
    },
    "cart": {
      "spofLinkButton": "Schnell-Bestell-Formular",
      "cartCheckoutButton": "Bezahlen",
      "requirementsWarning": "Bestellanforderungen nicht erfüllt",
      "requirementsSeeBelow": "Siehe unten für weitere Informationen",
      "cartTitileH1": "Ihr Einkaufswagen",
      "labelQuantity": "Anzahl",
      "labelTotal": "Gesamt",
      "smallRemove": "Entfernen",
      "labelAddANote": "Anmerkung zu Ihrer Bestellung",
      "labelAddress": "Adresse",
      "labelSubtotal": "Zwischensumme",
      "returnToCartLink": "Zum Einkaufswagen zurückkehren",
      "confirmShipAddress": "Bitte bestätigen Sie Ihre Lieferadresse.",
      "warningCompany": "Bitte geben Sie den Namen Ihres Geschäftes ein.",
      "warningAddress": "Bitte geben Sie die Adresse ein.",
      "warningCity": "Bitte geben Sie eine Stadt ein",
      "warningCountry": "Bitte geben Sie ein Land an.",
      "warningZip": "Bitte geben Sie eine Postleitzahl an",
      "cartSummary": "Zusammenfassung Einkaufswagen",
      "labelTaxes": "Steuern",
      "textCalcAtCheckout": "Wird berechnet bei Bezahlung",
      "labelShipping": "Lieferung",
      "textCalcNextStep": "Nächster berechneter Schrit",
      "textCartEmpty": "Ihr Einkaufswagen ist derzeit leer.",
      "textBackordered": "Ihre Bestellung enthält rückständige Artikel.",
      "textViewItems": "Artikel ansehen",
      "textShipPartial": "Teillieferung",
      "msgShipPartial": "Alle verfügbaren Artikel sofort liefern, alle restlichen Artikel liefern, sobald verfügbar.",
      "textShipComplete": "Vollständige Lieferung",
      "msgShipComplete": "Mit der Bestellung abwarten, bis alle Artikel verfügbar sind.",
      "backorderedItems": "Rückständig Artikel",
      "close": "Schließe"
    },
    "draftNet": {
      "netTitle": "Vielen Dank für Ihre Bestellung!",
      "internationalChkoutTitle": "Vielen Dank für Ihre Bestellung!",
      "addingDiscount": "Großhandelsrabatte werden hinzugefügt, bitte warten...",
      "problemProcessing": "Ups, es gab ein Problem bei der Verarbeitung Ihrer Bestellung."
    },
    "spof": {
      "showVariants": "[+] Varianten anzeigen",
      "hideVariants": "[ - ] Varianten verbergen",
      "cartUpdatedMsg": "Einkaufswagen aktualisiert",
      "viewCart": "Einkaufswagen ansehen",
      "noProducts": "Keine Artikel zum Anzeigen verfügbar",
      "noProductsInView": "Diese Ansicht enthält keine Artikel.",
      "outOfStock": "Nicht verfügbar",
      "backordered": "Rückständig",
      "backorderedShips": "Rückständig - Lieferungen"
    }
  },
  "general": {
    "viewQuickLink": "Schnell-Bestell-Formular ansehen",
    "logInToView": "Einloggen und ansehen",
    "logInForProduct": "Loggen Sie sich in ein zugelassenes Konto ein, um sich diesen Artikel anzusehen.",
    "buttonLogin": "Einloggen",
    "ships": "Lieferungen ",
    "restrictedItemsInCart": "Eingeschränkte Artikel im Einkaufswagen",
    "restrictedMessage": "Einige Artikel in Ihrem Einkaufswagen sind ausschließlich für zugelassene Großhandelskunden verfügbar. Wenn Sie als Kunde eine Berechtigung haben, so loggen Sie sich bitte in Ihr Konto ein und fahren Sie fort. Andernfalls klicken Sie unten auf ‚Artikel entfernen‘, um Ihren Einkauf fortzusetzen.",
    "restrictedItems": "Eingeschränkte Artikel:",
    "buttonRemoveRestricted": "Artikel entfernen"
  },
  "minimums": {
    "requirementsNotMet": "Bestellanforderungen nicht erfüllt.",
    "eachItemMultiple": "Jeder Artikel dieses Einkaufswagens muss ein Vielfaches sein von ",
    "maximumOf": "Maximal ",
    "forEachItem": " für jeden Artikel im Einkaufswagen",
    "minimumOf": "Minimal ",
    "totalItemsFrom": " Gesamtzahl der Artikel von ",
    "currentTotal": ". Derzeitige Gesamtzahl: ",
    "totalCurrentTotal": " Artikel insgesamt.  Derzeitige Gesamtzahl: ",
    "totalItemMultiple": "Die Gesamtzahl der Artikel dieses Einkaufswagens muss ein Vielfaches sein von ",
    "cartMinimum": "Der Einkaufswagen muss ein Minimum haben von ",
    "cartSubtotal": "Die Zwischensumme des Einkaufswagens muss betragen mindestens ",
    "totalLessThan": "Die Gesamtzahl der Artikel dieses Einkaufswagens muss weniger betragen als ",
    "singleMinimumOf": ": Minimal ",
    "mustBeMultiple": " Muss ein Vielfaches sein von ",
    "perItemIn": " pro Artikel im ",
    "eachItemIn": ": jeder Artikel im ",
    "singleMaxOf": ": Maximal ",
    "seeAll": "Alles sehen",
    "totalItemsIn": "Artikel insgesamt in "
  },
  "placeholders": {
    "placeFirstName": "Vorname",
    "placeLastName": "Familienname",
    "placeEmail": "Email",
    "placeCompany": "Unternehmen",
    "placeTaxId": "Steuer-ID/ABN/Umsatzsteuernummer",
    "placePhone": "Telefonnummer",
    "placeWebsite": "Webseite",
    "placeNotes": "Erzählen Sie uns bitte ein bisschen über sich, sodass wir Ihre Geschäftsidentität nachweisen können.",
    "placeAddress1": "Adresszeile 1",
    "placeAddress2": "Adresszeile 2",
    "placeCity": "Stadt",
    "placeZip": "Postleitzahl",
    "placePassword": "Passwort",
    "forgotPasswordLink": "Haben Sie Ihr Passwort vergessen?"
  },
  "valueAttrs": {
    "continueButton": "Fortfahren",
    "signinButton": "Einloggen",
    "valueSubmit": "Senden",
    "updateCartButton": "Einkaufswagen aktualisieren"
  },
  "alertEmailTaken": "Es existiert bereits ein Konto mit dieser Email-Adresse. Loggen Sie sich mit dieser Email-Adresse ein oder kontaktieren Sie uns.",
  "alertErrorProcessing": "Es gab einen Fehler bei der Bearbeitung Ihrer Anfrage.  Bitte überprüfen Sie, ob alle Felder korrekt ausgefüllt sind und versuchen Sie es erneut. \n\n",
  "alertErrorProcessingDraft": "Es tut uns leid, aber es gab einen Fehler bei der Bearbeitung Ihrer Anfrage.  Bitte versuchen Sie es erneut.  Sollte sich das Problem wiederholen, so kontaktieren Sie uns bitte.",
  "alertShippingError": "Es gab ein Problem bei der Berechnung Ihrer Lieferung. Bitte überprüfen Sie, ob alle Felder korrekt ausgefüllt sind und versuchen Sie es erneut. \n\n Sollte sich das Problem wiederholen, so kontaktieren Sie uns bitte.",
  "alertOrderProcessingError": "Es tut uns leid, aber es gab einen Fehler bei der Bearbeitung Ihrer Bestellung.  Bitte versuchen Sie es erneut. \n\n Sollte das Problem weiterhin bestehen, so kontaktieren Sie uns bitte.",
  "alertInventoryError": "`Die Bestände sind ausgeschöpft, weshalb wir Ihren Einkaufswagen nicht vollständig befüllen können. Die Artikel werden bis zur maximal verfügbaren Anzahl aktualisiert.\n ${itemsChanged}`",
  "quantity": "Anzahl: ",
  "only": "nur ",
  "available": " verfügbar",
  "alertRemoving": "Einige Artikel in Ihrem Warenkorb sind für Großhandelskunden nicht verfügbar. Die folgenden Elemente werden entfernt: \n"
}
},{}],4:[function(require,module,exports){
module.exports={
  "text": {
    "signupLoginReset": {
      "applyH1": "Jelentkezés nagykereskedelmi fiókra",
      "loginH1": "Bejelentkezés a nagykereskedelmi fiókba",
      "loginLinkA": "Már van fiókja? Bejelentkezés itt.",
      "signupLinkA": "Szüksége van egy nagykereskedelmi fiókra? Regisztráljon itt.",
      "customerInfo": "Vásárlói információ",
      "labelFirstName": "Vezetéknév",
      "labelLastName": "Keresztnév",
      "labelEmail": "Email",
      "labelCompany": "Cégnév",
      "labelTaxId": "Adószám",
      "labelPhone": "Telefonszám",
      "labelWebsite": "Weboldal",
      "labelNotes": "Megjegyzés",
      "shipAddress": "Szállítási cím",
      "labelAddress1": "Utca házsszám, emelet ajtó",
      "labelAddress2": "Cím folytatása",
      "labelCity": "Város",
      "labelCountry": "Ország",
      "labelState": "Megye",
      "labelZip": "Irányítószám",
      "labelPassword": "Jelszó",
      "resetPasswordH2": "Jelszó visszaállítás",
      "resetPasswordNote": "Hamarosan küldünk egy e-mailt, a jelszava visszaállításának útmutatásával.",
      "cancelButton": "Törlés"
    },
    "signupPendingSignupActive": {
      "accountCreated": "Fiók létrehozva!",
      "checkYourEmail": "Kérjük, nézze meg az e-mail fiókját, hogy van-e aktiválási link, így létrehozhat egy jelszót és elkezdhet vásárolni.",
      "accountInVerification": "Kérjük, figyelje az e-mail fiókját. Amint ellenőrizzük jelentkezését, e-mailt küldünk Önnek egy linkkel, amelyen beállíthatja a jelszavát, hogy elkezdhesse a vásárlást."
    },
    "cart": {
      "spofLinkButton": "Gyors megrendelőlap",
      "cartCheckoutButton": "Megrendelem",
      "requirementsWarning": "A Rendelési követelmények nem teljesülnek",
      "requirementsSeeBelow": "A részleteket lásd lejjebb.",
      "cartTitileH1": "Az Ön kosara",
      "labelQuantity": "Mennyiség",
      "labelTotal": "Összesen",
      "smallRemove": "Törlés",
      "labelAddANote": "Adjon megjegyzést a megrendeléséhez",
      "labelAddress": "Cím",
      "labelSubtotal": "Részösszeg",
      "returnToCartLink": "Vissza a kosárba",
      "confirmShipAddress": "Kérjük, erősítse meg szállítási címét",
      "warningCompany": "Kérjük, írja be üzlete nevét.",
      "warningAddress": "Kérjük, adjon meg egy címet.",
      "warningCity": "Kérjük, adjon meg egy várost",
      "warningCountry": "Kérjük, válasszon egy országot",
      "warningZip": "Kérjük, írja be az irányítószámot.",
      "cartSummary": "Kosár összefoglalása",
      "labelTaxes": "Adók",
      "textCalcAtCheckout": "A pénztárnál számolva",
      "labelShipping": "Szállítási költség",
      "textCalcNextStep": "A szállítási költség, a következő lépésnél kerül kiszámításra",
      "textCartEmpty": "A kosara jelenleg üres",
      "textBackordered": "Megrendelése utólag rendelt elemeket tartalmaz.",
      "textViewItems": "A tételek megtekintése",
      "textShipPartial": "Részleges Szállítási költség",
      "msgShipPartial": "Az összes raktáron lévő terméket szállítsa most, a többit küldje el, amikor rendelkezésre áll.",
      "textShipComplete": "Teljes szállítási költség",
      "msgShipComplete": "Még ne küldjék el a rendelésemet, várják meg, amíg az összes cikk rendelkezésre nem áll."
    },
    "draftNet": {
      "netTitle": "Köszönjük a rendelését!",
      "internationalChkoutTitle": "Köszönjük a rendelését!",
      "addingDiscount": "Nagykereskedelmi kedvezmények hozzáadása, kérjük, várjon ...",
      "problemProcessing": "Hoppá, probléma merült fel a rendelés feldolgozásakor ..."
    },
    "spof": {
      "showVariants": "[+] Mutasd a Variációkat",
      "hideVariants": "[ - ]  A variációk elrejtése",
      "cartUpdatedMsg": "Kosár frissítve",
      "viewCart": "Kosár megtekintése",
      "noProducts": "Nincs megjeleníthető termék",
      "noProductsInView": "Ebben a nézetben nincsenek termékek.",
      "outOfStock": "Sajnos nincs raktásron",
      "backordered": "Fenmaradó",
      "backorderedShips": "Fenmaradó - Szállítás"
    } 
  },
  "general": {
    "viewQuickLink": "Kérjük, tekintse meg a gyors megrendelőlapot",
    "logInToView": "Jelentkezzen be a megtekintéshez",
    "logInForProduct": "A termék megtekintéséhez jelentkezzen be egy regisztrált fiókba.",
    "buttonLogin": "Belépés",
    "ships": "Szállítás ",
    "restrictedItemsInCart": "Korlátozott cikkek a kosárban",
    "restrictedMessage": "A kosár egyes elemei csak jóváhagyott nagykereskedők számára érhetők el. Ha Ön regisztrált ügyfél, jelentkezzen be fiókjába a folytatáshoz. Ellenkező esetben a vásárlás folytatásához az alábbi linkre kell kattintania:",
    "restrictedItems": "Korlátozott tételek:",
    "buttonRemoveRestricted": "Távolítsa el az elemeket"
  },
  "minimums": {
    "requirementsNotMet": "A rendelési követelmények nem teljesülnek.",
    "eachItemMultiple": "A kosárban lévő minden egyes elemnek többszöröse lehet ",
    "maximumOf": "Legfeljebb ",
    "forEachItem": " minden egyes kosárba",
    "minimumOf": "Legalább ",
    "totalItemsFrom": " az összes tételből ",
    "currentTotal": ". Jelenlegi összesen: ",
    "totalCurrentTotal": " összes elem. Jelenlegi összesen: ",
    "totalItemMultiple": "A kosárban lévő összes tétel többszörösének kell lennie ",
    "cartMinimum": "A kosárnak legalább ",
    "cartSubtotal": "A kosár részösszegének magasabbnak kell lennie ",
    "totalLessThan": "A kosár összes elemének kevesebbnek kell lennie ",
    "singleMinimumOf": ": minimum ",
    "mustBeMultiple": ": többszöröse lehet ",
    "perItemIn": " tételenként ",
    "eachItemIn": ": minden elem ",
    "singleMaxOf": ": maximum ",
    "seeAll": "Az összes megtekintése",
    "totalItemsIn": "Összes elem a "
  },
  "placeholders": {
    "placeFirstName": "Vezetéknév",
    "placeLastName": "Keresztnév",
    "placeEmail": "Email",
    "placeCompany": "Cégnév",
    "placeTaxId": "Adószám",
    "placePhone": "Telefonszám",
    "placeWebsite": "Weboldal",
    "placeNotes": "Kérjük, mondjon néhány információt Önről, Cégéről, miért szeretne viszonteladó partnerünk lenni?!",
    "placeAddress1": "Utca házsszám, emelet ajtó",
    "placeAddress2": "Cím folytatás",
    "placeCity": "Város",
    "placeZip": "Irányítószám",
    "placePassword": "Jelszó",
    "forgotPasswordLink": "Elfelejtette a jelszavát?"
  },
  "valueAttrs": {
    "continueButton": "ELKÜLD",
    "signinButton": "Bejelentkezés",
    "valueSubmit": "Elküldve",
    "updateCartButton": "KOSÁRHOZ ADOM"
  },
  "alertEmailTaken": "Ezzel az e-mail címmel már létezik fiók. Jelentkezzen be ezzel az e-mail címmel, vagy lépjen kapcsolatba velünk segítségért.",
  "alertErrorProcessing": "Hiba történt a kérés feldolgozásakor. Ellenőrizze, hogy az összes mező helyesen van kitöltve, és próbálja újra.\n\n",
  "alertErrorProcessingDraft": "Sajnáljuk, hiba történt a megrendelés tervezetének feldolgozásakor. Kérjük, próbálja meg újra. Ha a probléma továbbra is fennáll, kérjük ossza meg velünk.",
  "alertShippingError": "Hiba történt a szállítás kiszámításánál, kérjük, ellenőrizze, hogy az összes mező helyesen van kitöltve, és próbálkozzon újra.\n Ha a probléma továbbra is fennáll, kérjük, forduljon hozzánk segítségért.",
  "alertOrderProcessingError": "Sajnáljuk, hiba történt a megrendelés feldolgozásakor. Kérjük, próbálja újra. \n\nHa a probléma továbbra is fennáll, kérjük, vegye fel velünk a kapcsolatot. \n\n",
  "alertInventoryError": "`Nincs elegendő készlet ahhoz, hogy egyes tételeket beletegyen a kosárba. A tételeket a rendelkezésre álló maximális mennyiségre frissítjük.\n ${itemsChanged}`",
  "quantity": "Mennyiség: ",
  "available": " elérhető",
  "alertRemoving": "A kosár egyes elemei nem érhetők el nagykereskedelemben. A következő elemek eltávolításra kerülnek: \n"
}
},{}],5:[function(require,module,exports){
"use strict";

var files = {
  english: require("./english.json"),
  spanish: require("./spanish.json"),
  italian: require("./italian.json"),
  french: require("./french.json"),
  hungarian: require("./hungarian.json"),
  german: require("./german.json")
};
exports.files = files;

},{"./english.json":1,"./french.json":2,"./german.json":3,"./hungarian.json":4,"./italian.json":6,"./spanish.json":7}],6:[function(require,module,exports){
module.exports={
  "text": {
    "signupLoginReset": {
      "applyH1": "Registrarsi come Rivenditore",
      "loginH1": "Accedi al tuo account Rivenditore",
      "loginLinkA": "Sei giä registrato? Entra qui.",
      "signupLinkA": "Hai bisogno di un account? Iscriviti qui",
      "customerInfo": "Dati del Cliente",
      "labelFirstName": "Nome",
      "labelLastName": "Cognome",
      "labelEmail": "Email",
      "labelCompany": "Ragione Sociale",
      "labelTaxId": "Partita Iva",
      "labelPhone": "N. di Telefono",
      "labelWebsite": "Sito Web",
      "labelNotes": "Note",
      "shipAddress": "Indirizzo di spedizione",
      "labelAddress1": "Indirizzo 1",
      "labelAddress2": "Indirizzo 2",
      "labelCity": "Città",
      "labelCountry": "Paese",
      "labelState": "Provincia",
      "labelZip": "CAP",
      "labelPassword": "Password",
      "resetPasswordH2": "Reimposta la tua Password",
      "resetPasswordNote": " Vi invieremo una email con le istruzioni per reimpostare la password.",
      "cancelButton": "Cancella"
    },
    "signupPendingSignupActive": {
      "accountCreated": "Account Creato!",
      "checkYourEmail": "Controlla la tua e-mail e clicca sul link di attivazione in modo da poter creare una password e iniziare i tuoi acquisti.",
      "accountInVerification": "Tieni d'occhio la tua email. Non appena verificheremo il tuo account, ti invieremo un'e-mail con un link per impostare la password in modo da poter iniziare a fare acquisti."
    },
    "cart": {
      "spofLinkButton": "Modulo d'Ordine Rapido",
      "cartCheckoutButton": "Checkout",
      "requirementsWarning": "I requisiti dell'ordine non sono soddisfatti.",
      "requirementsSeeBelow": "Vedi sotto per maggiori dettagli.",
      "cartTitileH1": "Il tuo Carrello",
      "labelQuantity": "Quantità",
      "labelTotal": "Totale",
      "smallRemove": "Rimuovere",
      "labelAddANote": "Aggiungi una nota al tuo ordine",
      "labelAddress": "Indirizzo",
      "labelSubtotal": "Totale Parziale",
      "returnToCartLink": "Ritorna al carrello",
      "confirmShipAddress": "Conferma il tuo indirizzo di spedizione",
      "warningCompany": "Inserisci il nome del tuo negozio.",
      "warningAddress": "Per favore inserisci un indirizzo",
      "warningCity": "Per favore, inserisci una città",
      "warningCountry": "Per favore seleziona un paese",
      "warningZip": "Inserisci un codice postale / CAP.",
      "cartSummary": "Riepilogo carrello",
      "labelTaxes": "Tasse",
      "textCalcAtCheckout": "Calcolato alla cassa",
      "labelShipping": "Spedizione",
      "textCalcNextStep": "Calcolato al passaggio successivo",
      "textCartEmpty": "Il carrello è vuoto",
      "textBackordered": "Il tuo ordine contiene articoli in arretrato.",
      "textViewItems": "Visualizza gli articoli",
      "textShipPartial": "Spedizione Parziale",
      "msgShipPartial": "Spedisci subito tutti gli articoli disponibili, invia il resto quando saranno disponibili.",
      "textShipComplete": "Spedizione Completa",
      "msgShipComplete": "Aspetta di inviare il mio ordine fino a quando tutti gli articoli non saranno disponibili per la spedizione.",
      "backorderedItems": "Articoli in arretrato",
      "close": "Chiudi"
    },
    "draftNet": {
      "netTitle": "Grazie per il vostro ordine!",
      "internationalChkoutTitle": "Grazie per il vostro ordine!",
      "addingDiscount": "Aggiunta sconto rivenditore, attendere ...",
      "problemProcessing": "Spiacenti, si è verificato un problema durante l'elaborazione dell'ordine ..."
    },
    "spof": {
      "showVariants": "[+]  Mostra Varianti",
      "hideVariants": "[ - ]  Nascondi Varianti",
      "cartUpdatedMsg": "Carrello aggiornato",
      "viewCart": "Vedi il Carrello",
      "noProducts": "Nessun prodotto da visualizzare",
      "noProductsInView": "Al momento non ci sono prodotti",
      "outOfStock": "Esaurito",
      "backordered": "Ordine arretrato",
      "backorderedShips": "Spedizione dell'ordine arretrato"
    }
  },
  "general": {
    "viewQuickLink": "Formulario d'Ordine Rapido",
    "logInToView": "Accedi per visualizzare",
    "logInForProduct": "Per visualizzare questo prodotto, accedi a un account approvato.",
    "buttonLogin": "Accedi",
    "ships": "Spedizione ",
    "restrictedItemsInCart": "Articoli con restrizioni nel carrello",
    "restrictedMessage": "Alcuni articoli nel carrello sono disponibili solo per i rivenditori verificati. Se sei un cliente verificato puoi accedere al tuo account per continuare. Altrimenti dovrai cliccare su 'Rimuovi articoli' per continuare gli acquisti.",
    "restrictedItems": "Articoli limitati:",
    "buttonRemoveRestricted": "Rimuovi gli Articoli"
  },
  "minimums": {
    "requirementsNotMet": "I requisiti dell'ordine non sono soddisfatti.",
    "eachItemMultiple": "Ogni articolo nel carrello deve essere un multiplo di ",
    "maximumOf": "Massimo di ",
    "forEachItem": " per ogni articolo nel carrello",
    "minimumOf": "Minimo di ",
    "totalItemsFrom": " articoli totali da ",
    "currentTotal": ". Totale attuale: ",
    "totalCurrentTotal": " articoli totali.  Totale attuale: ",
    "totalItemMultiple": "Il totale degli articoli nel carrello deve essere un multiplo di ",
    "cartMinimum": "Il carrello deve avere un minimo di ",
    "cartSubtotal": "Il totale parziale del carrello deve essere almeno ",
    "totalLessThan": "Il totale degli articoli nel carrello deve essere inferiore a ",
    "singleMinimumOf": ": minimo dif ",
    "mustBeMultiple": ": deve essere un multiplo di ",
    "perItemIn": " per articolo nel ",
    "eachItemIn": ": ogni articolo in ",
    "singleMaxOf": ": massimo di ",
    "seeAll": "Vedi tutto",
    "totalItemsIn": "Totale articoli in "
  },
  "placeholders": {
    "placeFirstName": "Nome",
    "placeLastName": "Cognome",
    "placeEmail": "Email",
    "placeCompany": "Ragione Sociale",
    "placeTaxId": "Partita Iva",
    "placePhone": "N. di Telefono",
    "placeWebsite": "Sito Web",
    "placeNotes": "Parlaci di te in modo che possiamo verificare la tua identità.",
    "placeAddress1": "Indirizzo 1",
    "placeAddress2": "Indirizzo 2",
    "placeCity": "Città",
    "placeZip": "CAP",
    "placePassword": "Password",
    "forgotPasswordLink": "Reimpostare la Password"
  },
  "valueAttrs": {
    "continueButton": "Continua",
    "signinButton": "Entra Qui",
    "valueSubmit": "Invia",
    "updateCartButton": "Aggiorna il Carrello"
  },
  "alertEmailTaken": "Un account con questa email esiste già. Accedi con questo indirizzo email o contattaci per ricevere assistenza.",
  "alertErrorProcessing": "Si è verificato un errore durante l'elaborazione della richiesta. Verifica che tutti i campi siano corretti e riprova.\n\n",
  "alertErrorProcessingDraft": "Spiacenti, si è verificato un errore durante l'elaborazione della bozza dell'ordine. Riprova. Se il problema persiste, faccelo sapere.",
  "alertShippingError": "Si è verificato un problema durante il calcolo della spedizione, verifica che tutti i campi siano corretti e riprova. \n Se il problema persiste, contattaci per assistenza.",
  "alertOrderProcessingError": "Spiacenti, si è verificato un errore durante l'elaborazione del tuo ordine. Riprova.\n\n Se il problema persiste, ti preghiamo di contattarci.\n\n",
  "alertInventoryError": "Non ci sono abbastanza articoli per riempire alcuni articoli nel carrello. Gli articoli saranno aggiornati alla quantità massima disponibile.\n",
  "quantity": "Quantità: ",
  "only": "solo ",
  "available": " disponibili",
  "alertRemoving": "Alcuni articoli nel carrello non sono disponibili per i clienti all'ingrosso. Verranno rimossi i seguenti elementi: \n"
}
},{}],7:[function(require,module,exports){
module.exports={
  "text": {
        "signupLoginReset": {
          "applyH1": "Solicite una Cuenta Mayorista",
          "loginH1": "Iniciar Sesión de su Cuenta Mayorista",
          "loginLinkA": "¿Ya tiene una cuenta?  Inicie sesión aquí",
          "signupLinkA": "¿Necesita una cuenta?  Regístrese aquí",
          "customerInfo": "Información del cliente",
          "labelFirstName": "Primer nombre",
          "labelLastName": "Apellido",
          "labelEmail": "Correo electrónico",
          "labelCompany": "Empresa",
          "labelTaxId": "Número de identificación fiscal, ABN o número de IVA",
          "labelPhone": "Número de Teléfono",
          "labelWebsite": "Sitio Web",
          "labelNotes": "Notas",
          "shipAddress": "Dirección de Envío",
          "labelAddress1": "Direccións 1",
          "labelAddress2": "Direccións 2",
          "labelCity": "Ciudad",
          "labelCountry": "País",
          "labelState": "Estado/Departamento",
          "labelZip": "Código postal",
          "labelPassword": "Contraseña",
          "forgotPasswordLink": "¿Olvidaste tu contraseña?",
          "resetPasswordH2": "Restablecer su contraseña",
          "resetPasswordNote": "Le enviaremos un correo electrónico con instrucciones sobre cómo restablecer su contraseña.",
          "cancelButton": "Cancelar"
    },
        "signupPendingSignupActive": {
          "accountCreated": "¡Cuenta creada!",
          "checkYourEmail": "Revise su correo electrónico en busca de un enlace de activación para que pueda crear una contraseña y comenzar a comprar",
          "accountInVerification": "Vigile su correo electrónico.  Tan pronto como verifiquemos su cuenta, le enviaremos un correo electrónico con un enlace para configurar su contraseña para que pueda comenzar a comprar."
    },
        "cart": {
          "spofLinkButton": "Formulario de Pedido Rápido",
          "cartCheckoutButton": "Pagar",
          "requirementsWarning": "Requisitos de pedido no cumplidos",
          "requirementsSeeBelow": "Vea los detalles más abajo.",
          "cartTitileH1": "Su carrito de compras",
          "labelQuantity": "Cantidad",
          "labelTotal": "Total",
          "smallRemove": "Quitar",
          "labelAddANote": "Agregue una Nota a su Pedido",
          "labelAddress": "Dirección",
          "labelSubtotal": "Subtotal",
          "returnToCartLink": "Volver al carrito de compras",
          "confirmShipAddress": "Por favor, confirme su Dirección de Envío",
          "warningCompany": "Por favor, escriba su nombre.",
          "warningAddress": "Por favor, escriba una dirección",
          "warningCity": "Por favor, escriba una ciudad",
          "warningCountry": "Por favor, seleccione un país",
          "warningZip": "Por favor, escriba el código postal",
          "cartSummary": "Resumen del carrito de compras",
          "labelTaxes": "Impuestos",
          "textCalcAtCheckout": "Calculado al momento de pagar",
          "labelShipping": "Envío",
          "textCalcNextStep": "Calculado en el siguiente paso",
          "textCartEmpty": "Su carrito está vacío",
          "textBackordered": "Su pedido contiene artículos pendientes.",
          "textViewItems": "Ver Artículos",
          "textShipPartial": "Enviar Parcial",
          "msgShipPartial": "Enviar todos los artículos en existencia ahora, enviar el resto cuando estén disponibles",
          "textShipComplete": "Enviar por completo",
          "msgShipComplete": "Esperar para enviar mi pedido hasta que todos los artículos estén disponibles para enviar",
          "backorderedItems": "Artículos pendientes",
          "close": "Cerrar"
    },
        "draftNet": {
          "netTitle": "¡Gracias por su orden!",
          "internationalChkoutTitle": "¡Gracias por su orden!",
          "addingDiscount": "Agregando descuentos de mayorista, por favor espere...",
          "problemProcessing": "¡Oh no! hubo un problema al procesar el pedido..."
    },
        "spof": {
          "showVariants": "[+]  Mostrar Variantes",
          "hideVariants": "[ - ]  Ocultar Variantes",
          "cartUpdatedMsg": "Carrito Actualizado",
          "viewCart": "Ver carrito de compras",
          "noProducts": "No hay productos para mostrar",
          "noProductsInView": "No hay productos en esta vista.",
          "outOfStock": "Agotado",
          "backordered": "En espera",
          "backorderedShips": "En espera - Se envía "
    }
  },
      "general": {
        "viewQuickLink": "Ver Formulario de Pedido Rápido",
        "logInToView": "Inicia sesión para ver",
        "logInForProduct": "Para ver este producto, inicie sesión en una cuenta aprobada",
        "buttonLogin": "Iniciar sesión",
        "restrictedItemsInCart": "Artículos restringidos en el carrito de compras",
        "restrictedMessage" : "Algunos artículos en su carrito solo están disponibles para clientes mayoristas aprobados.  Si es un cliente elegible, puede iniciar sesión en su cuenta para continuar. De lo contrario, deberá hacer clic en 'Eliminar artículos' a continuación para seguir comprando",
        "restrictedItems" : "Artículos restringidos:",
        "buttonRemoveRestricted" : "Quitar artículos"
  },
      "minimums": {
        "requirementsNotMet": "Requisitos de pedido no cumplidos.",
        "eachItemMultiple": "Cada artículo en el carrito debe ser un múltiplo de ",
        "maximumOf": "Máximo de ",
        "forEachItem": " para cada artículo en el carrito",
        "minimumOf": "Mínimo de ",
        "totalItemsFrom": " total de artículos de ",
        "currentTotal": ". Total actual: ",
        "totalCurrentTotal": " total de artículos.  Total actual: ",
        "totalItemMultiple": "El total de artículos en el carrito debe ser un múltiplo de ",
        "cartMinimum": "El carrito debe tener un mínimo de ",
        "cartSubtotal": "El subtotal del carrito debe ser al menos ",
        "totalLessThan": "El total de artículos en el carrito debe ser menos de ",
        "singleMinimumOf": ": mínimo de ",
        "mustBeMultiple": ": debe ser un múltiplo de ",
        "perItemIn": " por artículo en ",
        "eachItemIn": ": cada artículo en ",
        "singleMaxOf": ": máximo de ",
        "seeAll": "Ver todo",
        "totalItemsIn": "Total de artículos en "
  },
      "placeholders": {
        "placeFirstName": "Primer nombre",
        "placeLastName": "Apellido",
        "placeEmail": "Correo electrónico",
        "placeCompany": "Empresa",
        "placeTaxId": "Número de identificación fiscal/ABN/IVA",
        "placePhone": "Número de Teléfono",
        "placeWebsite": "Sitio Web",
        "placeNotes": "Cuéntenos un poco sobre usted para que podamos verificar su identidad comercial",
        "placeAddress1": "Línea 1 de dirección",
        "placeAddress2": "Línea 2 de dirección",
        "placeCity": "Ciudad",
        "placeZip": "Código postal",
        "placePassword": "Contraseña"
  },
      "valueAttrs": {
        "continueButton": "Continuar",
        "signinButton": "Registrarse",
        "valueSubmit": "Enviar",
        "updateCartButton": "Actualizar carrito de compras"
  },
  "alertEmailTaken" : "Ya existe una cuenta con este nombre. Inicie sesión con esta dirección de correo electrónico o contáctenos para obtener ayuda",
  "alertErrorProcessing" : "Hubo un error al procesar su solicitud.  Por favor, verifique que todos los campos sean correctos e intente nuevamente.\n\n",
  "alertErrorProcessingDraft": "Lo sentimos, se produjo un error al procesar su orden de borrador.  Por favor intente de nuevo.  Si el problema persiste, por favor háganoslo saber",
  "alertShippingError": "Hubo un problema al calcular su envío, por favor verifique que todos los campos sean correctos e intente nuevamente.\n Si el problema persiste, por favor contáctenos para obtener ayuda",
  "alertOrderProcessingError": "Lo sentimos, se produjo un error al procesar su orden.  Por favor, inténtelo de nuevo. \n\n Si el problema persiste, por favor contáctenos. \n\n",
  "alertInventoryError": "No hay suficiente inventario para llenar algunos artículos en su carrito. Los artículos se actualizarán a nuestra cantidad máxima disponible. \n",
  "quantity" : "Cantidad: ",
  "only": "solo ",
  "available": " disponibles",
  "alertRemoving" : "Algunos artículos en su carrito no están disponibles para clientes mayoristas. Se eliminarán los siguientes elementos: \n"
}
},{}],8:[function(require,module,exports){
'use strict'

var data = require('./data.json')

/** Precompute name and code lookups. */
var nameMap = {}
var codeMap = {}
data.forEach(mapCodeAndName)

function mapCodeAndName (country) {
  nameMap[country.name.toLowerCase()] = country.code
  codeMap[country.code.toLowerCase()] = country.name
}

exports.overwrite = function overwrite (countries) {
  if (!countries || !countries.length) return 'asdf'
  countries.forEach(function (country) {
    var foundIndex = data.findIndex(function (item) {
      return item.code === country.code
    })
    // console.log('Changing "%s" to "%s"', data[foundIndex].name, country.name)
    data[foundIndex] = country
    mapCodeAndName(country)
  })
}

exports.getCode = function getCode (name) {
  return nameMap[name.toLowerCase()]
}

exports.getName = function getName (code) {
  return codeMap[code.toLowerCase()]
}

exports.getNames = function getNames () {
  return data.map(function (country) {
    return country.name
  })
}

exports.getCodes = function getCodes () {
  return data.map(function (country) {
    return country.code
  })
}

exports.getCodeList = function getCodeList () {
  return codeMap
}

exports.getNameList = function getNameList () {
  return nameMap
}

exports.getData = function getData () {
  return data
}

},{"./data.json":9}],9:[function(require,module,exports){
module.exports=[
  {
    "code": "AF",
    "name": "Afghanistan"
  },
  {
    "code": "AX",
    "name": "Åland Islands"
  },
  {
    "code": "AL",
    "name": "Albania"
  },
  {
    "code": "DZ",
    "name": "Algeria"
  },
  {
    "code": "AS",
    "name": "American Samoa"
  },
  {
    "code": "AD",
    "name": "Andorra"
  },
  {
    "code": "AO",
    "name": "Angola"
  },
  {
    "code": "AI",
    "name": "Anguilla"
  },
  {
    "code": "AQ",
    "name": "Antarctica"
  },
  {
    "code": "AG",
    "name": "Antigua and Barbuda"
  },
  {
    "code": "AR",
    "name": "Argentina"
  },
  {
    "code": "AM",
    "name": "Armenia"
  },
  {
    "code": "AW",
    "name": "Aruba"
  },
  {
    "code": "AU",
    "name": "Australia"
  },
  {
    "code": "AT",
    "name": "Austria"
  },
  {
    "code": "AZ",
    "name": "Azerbaijan"
  },
  {
    "code": "BS",
    "name": "Bahamas"
  },
  {
    "code": "BH",
    "name": "Bahrain"
  },
  {
    "code": "BD",
    "name": "Bangladesh"
  },
  {
    "code": "BB",
    "name": "Barbados"
  },
  {
    "code": "BY",
    "name": "Belarus"
  },
  {
    "code": "BE",
    "name": "Belgium"
  },
  {
    "code": "BZ",
    "name": "Belize"
  },
  {
    "code": "BJ",
    "name": "Benin"
  },
  {
    "code": "BM",
    "name": "Bermuda"
  },
  {
    "code": "BT",
    "name": "Bhutan"
  },
  {
    "code": "BO",
    "name": "Bolivia, Plurinational State of"
  },
  {
    "code": "BQ",
    "name": "Bonaire, Sint Eustatius and Saba"
  },
  {
    "code": "BA",
    "name": "Bosnia and Herzegovina"
  },
  {
    "code": "BW",
    "name": "Botswana"
  },
  {
    "code": "BV",
    "name": "Bouvet Island"
  },
  {
    "code": "BR",
    "name": "Brazil"
  },
  {
    "code": "IO",
    "name": "British Indian Ocean Territory"
  },
  {
    "code": "BN",
    "name": "Brunei Darussalam"
  },
  {
    "code": "BG",
    "name": "Bulgaria"
  },
  {
    "code": "BF",
    "name": "Burkina Faso"
  },
  {
    "code": "BI",
    "name": "Burundi"
  },
  {
    "code": "KH",
    "name": "Cambodia"
  },
  {
    "code": "CM",
    "name": "Cameroon"
  },
  {
    "code": "CA",
    "name": "Canada"
  },
  {
    "code": "CV",
    "name": "Cape Verde"
  },
  {
    "code": "KY",
    "name": "Cayman Islands"
  },
  {
    "code": "CF",
    "name": "Central African Republic"
  },
  {
    "code": "TD",
    "name": "Chad"
  },
  {
    "code": "CL",
    "name": "Chile"
  },
  {
    "code": "CN",
    "name": "China"
  },
  {
    "code": "CX",
    "name": "Christmas Island"
  },
  {
    "code": "CC",
    "name": "Cocos (Keeling) Islands"
  },
  {
    "code": "CO",
    "name": "Colombia"
  },
  {
    "code": "KM",
    "name": "Comoros"
  },
  {
    "code": "CG",
    "name": "Congo"
  },
  {
    "code": "CD",
    "name": "Congo, the Democratic Republic of the"
  },
  {
    "code": "CK",
    "name": "Cook Islands"
  },
  {
    "code": "CR",
    "name": "Costa Rica"
  },
  {
    "code": "CI",
    "name": "Côte d'Ivoire"
  },
  {
    "code": "HR",
    "name": "Croatia"
  },
  {
    "code": "CU",
    "name": "Cuba"
  },
  {
    "code": "CW",
    "name": "Curaçao"
  },
  {
    "code": "CY",
    "name": "Cyprus"
  },
  {
    "code": "CZ",
    "name": "Czech Republic"
  },
  {
    "code": "DK",
    "name": "Denmark"
  },
  {
    "code": "DJ",
    "name": "Djibouti"
  },
  {
    "code": "DM",
    "name": "Dominica"
  },
  {
    "code": "DO",
    "name": "Dominican Republic"
  },
  {
    "code": "EC",
    "name": "Ecuador"
  },
  {
    "code": "EG",
    "name": "Egypt"
  },
  {
    "code": "SV",
    "name": "El Salvador"
  },
  {
    "code": "GQ",
    "name": "Equatorial Guinea"
  },
  {
    "code": "ER",
    "name": "Eritrea"
  },
  {
    "code": "EE",
    "name": "Estonia"
  },
  {
    "code": "ET",
    "name": "Ethiopia"
  },
  {
    "code": "FK",
    "name": "Falkland Islands (Malvinas)"
  },
  {
    "code": "FO",
    "name": "Faroe Islands"
  },
  {
    "code": "FJ",
    "name": "Fiji"
  },
  {
    "code": "FI",
    "name": "Finland"
  },
  {
    "code": "FR",
    "name": "France"
  },
  {
    "code": "GF",
    "name": "French Guiana"
  },
  {
    "code": "PF",
    "name": "French Polynesia"
  },
  {
    "code": "TF",
    "name": "French Southern Territories"
  },
  {
    "code": "GA",
    "name": "Gabon"
  },
  {
    "code": "GM",
    "name": "Gambia"
  },
  {
    "code": "GE",
    "name": "Georgia"
  },
  {
    "code": "DE",
    "name": "Germany"
  },
  {
    "code": "GH",
    "name": "Ghana"
  },
  {
    "code": "GI",
    "name": "Gibraltar"
  },
  {
    "code": "GR",
    "name": "Greece"
  },
  {
    "code": "GL",
    "name": "Greenland"
  },
  {
    "code": "GD",
    "name": "Grenada"
  },
  {
    "code": "GP",
    "name": "Guadeloupe"
  },
  {
    "code": "GU",
    "name": "Guam"
  },
  {
    "code": "GT",
    "name": "Guatemala"
  },
  {
    "code": "GG",
    "name": "Guernsey"
  },
  {
    "code": "GN",
    "name": "Guinea"
  },
  {
    "code": "GW",
    "name": "Guinea-Bissau"
  },
  {
    "code": "GY",
    "name": "Guyana"
  },
  {
    "code": "HT",
    "name": "Haiti"
  },
  {
    "code": "HM",
    "name": "Heard Island and McDonald Islands"
  },
  {
    "code": "VA",
    "name": "Holy See (Vatican City State)"
  },
  {
    "code": "HN",
    "name": "Honduras"
  },
  {
    "code": "HK",
    "name": "Hong Kong"
  },
  {
    "code": "HU",
    "name": "Hungary"
  },
  {
    "code": "IS",
    "name": "Iceland"
  },
  {
    "code": "IN",
    "name": "India"
  },
  {
    "code": "ID",
    "name": "Indonesia"
  },
  {
    "code": "IR",
    "name": "Iran, Islamic Republic of"
  },
  {
    "code": "IQ",
    "name": "Iraq"
  },
  {
    "code": "IE",
    "name": "Ireland"
  },
  {
    "code": "IM",
    "name": "Isle of Man"
  },
  {
    "code": "IL",
    "name": "Israel"
  },
  {
    "code": "IT",
    "name": "Italy"
  },
  {
    "code": "JM",
    "name": "Jamaica"
  },
  {
    "code": "JP",
    "name": "Japan"
  },
  {
    "code": "JE",
    "name": "Jersey"
  },
  {
    "code": "JO",
    "name": "Jordan"
  },
  {
    "code": "KZ",
    "name": "Kazakhstan"
  },
  {
    "code": "KE",
    "name": "Kenya"
  },
  {
    "code": "KI",
    "name": "Kiribati"
  },
  {
    "code": "KP",
    "name": "Korea, Democratic People's Republic of"
  },
  {
    "code": "KR",
    "name": "Korea, Republic of"
  },
  {
    "code": "KW",
    "name": "Kuwait"
  },
  {
    "code": "KG",
    "name": "Kyrgyzstan"
  },
  {
    "code": "LA",
    "name": "Lao People's Democratic Republic"
  },
  {
    "code": "LV",
    "name": "Latvia"
  },
  {
    "code": "LB",
    "name": "Lebanon"
  },
  {
    "code": "LS",
    "name": "Lesotho"
  },
  {
    "code": "LR",
    "name": "Liberia"
  },
  {
    "code": "LY",
    "name": "Libya"
  },
  {
    "code": "LI",
    "name": "Liechtenstein"
  },
  {
    "code": "LT",
    "name": "Lithuania"
  },
  {
    "code": "LU",
    "name": "Luxembourg"
  },
  {
    "code": "MO",
    "name": "Macao"
  },
  {
    "code": "MK",
    "name": "Macedonia, the Former Yugoslav Republic of"
  },
  {
    "code": "MG",
    "name": "Madagascar"
  },
  {
    "code": "MW",
    "name": "Malawi"
  },
  {
    "code": "MY",
    "name": "Malaysia"
  },
  {
    "code": "MV",
    "name": "Maldives"
  },
  {
    "code": "ML",
    "name": "Mali"
  },
  {
    "code": "MT",
    "name": "Malta"
  },
  {
    "code": "MH",
    "name": "Marshall Islands"
  },
  {
    "code": "MQ",
    "name": "Martinique"
  },
  {
    "code": "MR",
    "name": "Mauritania"
  },
  {
    "code": "MU",
    "name": "Mauritius"
  },
  {
    "code": "YT",
    "name": "Mayotte"
  },
  {
    "code": "MX",
    "name": "Mexico"
  },
  {
    "code": "FM",
    "name": "Micronesia, Federated States of"
  },
  {
    "code": "MD",
    "name": "Moldova, Republic of"
  },
  {
    "code": "MC",
    "name": "Monaco"
  },
  {
    "code": "MN",
    "name": "Mongolia"
  },
  {
    "code": "ME",
    "name": "Montenegro"
  },
  {
    "code": "MS",
    "name": "Montserrat"
  },
  {
    "code": "MA",
    "name": "Morocco"
  },
  {
    "code": "MZ",
    "name": "Mozambique"
  },
  {
    "code": "MM",
    "name": "Myanmar"
  },
  {
    "code": "NA",
    "name": "Namibia"
  },
  {
    "code": "NR",
    "name": "Nauru"
  },
  {
    "code": "NP",
    "name": "Nepal"
  },
  {
    "code": "NL",
    "name": "Netherlands"
  },
  {
    "code": "NC",
    "name": "New Caledonia"
  },
  {
    "code": "NZ",
    "name": "New Zealand"
  },
  {
    "code": "NI",
    "name": "Nicaragua"
  },
  {
    "code": "NE",
    "name": "Niger"
  },
  {
    "code": "NG",
    "name": "Nigeria"
  },
  {
    "code": "NU",
    "name": "Niue"
  },
  {
    "code": "NF",
    "name": "Norfolk Island"
  },
  {
    "code": "MP",
    "name": "Northern Mariana Islands"
  },
  {
    "code": "NO",
    "name": "Norway"
  },
  {
    "code": "OM",
    "name": "Oman"
  },
  {
    "code": "PK",
    "name": "Pakistan"
  },
  {
    "code": "PW",
    "name": "Palau"
  },
  {
    "code": "PS",
    "name": "Palestine, State of"
  },
  {
    "code": "PA",
    "name": "Panama"
  },
  {
    "code": "PG",
    "name": "Papua New Guinea"
  },
  {
    "code": "PY",
    "name": "Paraguay"
  },
  {
    "code": "PE",
    "name": "Peru"
  },
  {
    "code": "PH",
    "name": "Philippines"
  },
  {
    "code": "PN",
    "name": "Pitcairn"
  },
  {
    "code": "PL",
    "name": "Poland"
  },
  {
    "code": "PT",
    "name": "Portugal"
  },
  {
    "code": "PR",
    "name": "Puerto Rico"
  },
  {
    "code": "QA",
    "name": "Qatar"
  },
  {
    "code": "RE",
    "name": "Réunion"
  },
  {
    "code": "RO",
    "name": "Romania"
  },
  {
    "code": "RU",
    "name": "Russian Federation"
  },
  {
    "code": "RW",
    "name": "Rwanda"
  },
  {
    "code": "BL",
    "name": "Saint Barthélemy"
  },
  {
    "code": "SH",
    "name": "Saint Helena, Ascension and Tristan da Cunha"
  },
  {
    "code": "KN",
    "name": "Saint Kitts and Nevis"
  },
  {
    "code": "LC",
    "name": "Saint Lucia"
  },
  {
    "code": "MF",
    "name": "Saint Martin (French part)"
  },
  {
    "code": "PM",
    "name": "Saint Pierre and Miquelon"
  },
  {
    "code": "VC",
    "name": "Saint Vincent and the Grenadines"
  },
  {
    "code": "WS",
    "name": "Samoa"
  },
  {
    "code": "SM",
    "name": "San Marino"
  },
  {
    "code": "ST",
    "name": "Sao Tome and Principe"
  },
  {
    "code": "SA",
    "name": "Saudi Arabia"
  },
  {
    "code": "SN",
    "name": "Senegal"
  },
  {
    "code": "RS",
    "name": "Serbia"
  },
  {
    "code": "SC",
    "name": "Seychelles"
  },
  {
    "code": "SL",
    "name": "Sierra Leone"
  },
  {
    "code": "SG",
    "name": "Singapore"
  },
  {
    "code": "SX",
    "name": "Sint Maarten (Dutch part)"
  },
  {
    "code": "SK",
    "name": "Slovakia"
  },
  {
    "code": "SI",
    "name": "Slovenia"
  },
  {
    "code": "SB",
    "name": "Solomon Islands"
  },
  {
    "code": "SO",
    "name": "Somalia"
  },
  {
    "code": "ZA",
    "name": "South Africa"
  },
  {
    "code": "GS",
    "name": "South Georgia and the South Sandwich Islands"
  },
  {
    "code": "SS",
    "name": "South Sudan"
  },
  {
    "code": "ES",
    "name": "Spain"
  },
  {
    "code": "LK",
    "name": "Sri Lanka"
  },
  {
    "code": "SD",
    "name": "Sudan"
  },
  {
    "code": "SR",
    "name": "Suriname"
  },
  {
    "code": "SJ",
    "name": "Svalbard and Jan Mayen"
  },
  {
    "code": "SZ",
    "name": "Eswatini"
  },
  {
    "code": "SE",
    "name": "Sweden"
  },
  {
    "code": "CH",
    "name": "Switzerland"
  },
  {
    "code": "SY",
    "name": "Syrian Arab Republic"
  },
  {
    "code": "TW",
    "name": "Taiwan, Province of China"
  },
  {
    "code": "TJ",
    "name": "Tajikistan"
  },
  {
    "code": "TZ",
    "name": "Tanzania, United Republic of"
  },
  {
    "code": "TH",
    "name": "Thailand"
  },
  {
    "code": "TL",
    "name": "Timor-Leste"
  },
  {
    "code": "TG",
    "name": "Togo"
  },
  {
    "code": "TK",
    "name": "Tokelau"
  },
  {
    "code": "TO",
    "name": "Tonga"
  },
  {
    "code": "TT",
    "name": "Trinidad and Tobago"
  },
  {
    "code": "TN",
    "name": "Tunisia"
  },
  {
    "code": "TR",
    "name": "Turkey"
  },
  {
    "code": "TM",
    "name": "Turkmenistan"
  },
  {
    "code": "TC",
    "name": "Turks and Caicos Islands"
  },
  {
    "code": "TV",
    "name": "Tuvalu"
  },
  {
    "code": "UG",
    "name": "Uganda"
  },
  {
    "code": "UA",
    "name": "Ukraine"
  },
  {
    "code": "AE",
    "name": "United Arab Emirates"
  },
  {
    "code": "GB",
    "name": "United Kingdom"
  },
  {
    "code": "US",
    "name": "United States"
  },
  {
    "code": "UM",
    "name": "United States Minor Outlying Islands"
  },
  {
    "code": "UY",
    "name": "Uruguay"
  },
  {
    "code": "UZ",
    "name": "Uzbekistan"
  },
  {
    "code": "VU",
    "name": "Vanuatu"
  },
  {
    "code": "VE",
    "name": "Venezuela, Bolivarian Republic of"
  },
  {
    "code": "VN",
    "name": "Viet Nam"
  },
  {
    "code": "VG",
    "name": "Virgin Islands, British"
  },
  {
    "code": "VI",
    "name": "Virgin Islands, U.S."
  },
  {
    "code": "WF",
    "name": "Wallis and Futuna"
  },
  {
    "code": "EH",
    "name": "Western Sahara"
  },
  {
    "code": "YE",
    "name": "Yemen"
  },
  {
    "code": "ZM",
    "name": "Zambia"
  },
  {
    "code": "ZW",
    "name": "Zimbabwe"
  }
]

},{}],10:[function(require,module,exports){
"use strict";

var _wsgDiscounts = require("../../wsg-discounts.js");

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var calcDiscount = require('../discountCalculators');

exports.initCart = function (wsgCart, wsgLineItems, addTags) {
  //builds a copy of the customer's cart
  wsgCart.items.forEach(function (lineItem) {
    var collectionsList, productTags;
    var foundData = false;
    var tempCollections = []; //get all collection, product and tags data for each product     
    //this is the old way of doing it (legacy shops or manual shops)

    var collectionsSelector = '.wsg-collections-list-' + lineItem.id + ":first";
    var tagsSelector = '.wsg-product-tags-' + lineItem.id + ":first"; //For AJAX cart updates on product page need to change selector to grab class and tags info as created in wsg-header
    //this is due to the original build using different classes for product data spans

    if ((0, _wsgDiscounts.jQuery321)(collectionsSelector).length == 0) {
      collectionsSelector = '.wsg-collections-list-' + lineItem.product_id + ":first";
      tagsSelector = '.wsg-product-tags-' + lineItem.product_id + ":first";
    } //get product data for AJAX carts on collections with ATC buttons for shops > v4.0


    if ((0, _wsgDiscounts.jQuery321)(collectionsSelector).length == 0) {
      if (typeof wsgAjaxCol != "undefined") {
        //check for undefined in case this is a > 4.0 shop that had to use manual collection item spans for some reason
        if (wsgAjaxCol[lineItem.product_id]) {
          productTags = wsgAjaxCol[lineItem.product_id].productTags;
          collectionsList = wsgAjaxCol[lineItem.product_id].collectionsList;
          foundData = true;
        }
      }
    } //DEPRECIATED - a few shops installed in Frb/March of 2019 might still be running it
    //check for array of collection data if still no selector


    if (typeof wsgColItems != "undefined" && (0, _wsgDiscounts.jQuery321)(collectionsSelector).length == 0) {
      for (var i = 0; i < wsgColItems.length; i++) {
        if (wsgColItems[i].id == lineItem.product_id) {
          //get collection and product data from array
          collectionsList = wsgColItems[i].collectionData;
          productTags = wsgColItems[i].prodData.tags;
          foundData = true;
          break;
        }
      }
    } //if it still wasn't found then use the legacy/manual selector to grab dom element values


    if (!foundData) {
      if ((0, _wsgDiscounts.jQuery321)(collectionsSelector).length == 0) {
        collectionsSelector = "#wsg-prod-id-" + lineItem.product_id + ":first";
        collectionsList = JSON.parse((0, _wsgDiscounts.jQuery321)(collectionsSelector).next(".wsg-collections-data").text());
        productTags = JSON.parse((0, _wsgDiscounts.jQuery321)(collectionsSelector).children().text());
        productTags = productTags.tags;
      } else {
        collectionsList = JSON.parse((0, _wsgDiscounts.jQuery321)(collectionsSelector).text());
        productTags = JSON.parse((0, _wsgDiscounts.jQuery321)(tagsSelector).text());
      }
    } //build array of collection ids


    collectionsList.forEach(function (collection) {
      tempCollections.push(collection.id);
    });
    var tempLineItem = {
      name: lineItem.product_title,
      title: lineItem.title,
      requiresShipping: lineItem.requires_shipping,
      sku: lineItem.sku,
      taxable: lineItem.taxable,
      grams: lineItem.grams,
      vendor: lineItem.vendor,
      variantTitle: lineItem.variant_title,
      lineItemId: lineItem.id,
      price: lineItem.price,
      linePrice: lineItem.line_price,
      quantity: lineItem.quantity,
      productId: lineItem.product_id,
      properties: lineItem.properties,
      variantId: lineItem.variant_id,
      collections: tempCollections,
      wsgPrice: lineItem.price,
      wsgLinePrice: lineItem.line_price,
      productTags: productTags
    };
    wsgLineItems.push(tempLineItem);
  });
  return wsgLineItems;
};

exports.calcCartPrices = function (wsgLineItems) {
  //cycle through discounts and apply to line items as necessary
  wsgCustomerTags.forEach(function (tag) {
    wsgData.discounts.forEach(function (discount) {
      if (tag == discount.tags) {
        if (discount.scope == "all") {
          //calc wsg price for all wsgLineItems
          for (var i = 0; i < wsgLineItems.length; i++) {
            wsgLineItems[i].wsgPrice = calcDiscount.calcDiscount(discount, wsgLineItems[i].price, wsgLineItems[i].wsgPrice);
            wsgLineItems[i].wsgLinePrice = wsgLineItems[i].wsgPrice * wsgLineItems[i].quantity;
          }
        } else if (discount.scope == 'collection') {
          for (var i = 0; i < wsgLineItems.length; i++) {
            wsgLineItems[i].collections.forEach(function (collectionId) {
              if (discount.collectionId == collectionId) {
                //collecitons match, calc wsg price
                wsgLineItems[i].wsgPrice = calcDiscount.calcDiscount(discount, wsgLineItems[i].price, wsgLineItems[i].wsgPrice);
                wsgLineItems[i].wsgLinePrice = wsgLineItems[i].wsgPrice * wsgLineItems[i].quantity;
              }
            });
          }
        } else if (discount.scope == 'product') {
          for (var i = 0; i < wsgLineItems.length; i++) {
            if (wsgLineItems[i].productId == discount.product_id) {
              //product ids match if there are variant rules check if they match
              if (discount.variants.length > 0) {
                discount.variants.forEach(function (variantRule) {
                  if (variantRule.variant_id == wsgLineItems[i].variantId) {
                    //variant rules match variant id, calc wsg price
                    wsgLineItems[i].wsgPrice = calcDiscount.calcDiscount(variantRule, wsgLineItems[i].price, wsgLineItems[i].wsgPrice);
                    wsgLineItems[i].wsgLinePrice = wsgLineItems[i].wsgPrice * wsgLineItems[i].quantity;
                  }
                });
              } else {
                //no variant rules, calc wsg price
                wsgLineItems[i].wsgPrice = calcDiscount.calcDiscount(discount, wsgLineItems[i].price, wsgLineItems[i].wsgPrice);
                wsgLineItems[i].wsgLinePrice = wsgLineItems[i].wsgPrice * wsgLineItems[i].quantity;
              }
            }
          }
        }
      }
    });
  });
  return wsgLineItems;
};

exports.wsgOn = function (wsgLineItems) {
  //DEPRECIATED
  //run a check to see if any wsg discounts were applied to the order
  //if not a regular checkout is run
  // var wsgOn = false;
  // for(let i=0; i <wsgLineItems.length; i++){
  //     if(wsgLineItems[i].wsgPrice < wsgLineItems[i].price){
  //         wsgOn = true;
  //         break;
  //     }
  // }
  var wsgOn = true;
  return wsgOn;
}; // Check the cart for products excluded from wholesale


exports.checkExclusions = function (wsgLineItems, isAjax) {
  var wsgLineItemsToRemove = [];
  var exclusions = wsgData.shop_preferences.exclusions; // Map through all of the items currently in the cart...

  wsgLineItems.map(function (lineItem) {
    // and then look through each of the store's exclusion tags...
    exclusions.forEach(function (exclusionTag) {
      // If the line item in the cart has an exclusion tag, push it to the array of excluded objects and then
      // revert it's wholesale price to retail for ajax carts          
      if (lineItem.productTags.indexOf(exclusionTag) !== -1) {
        wsgLineItemsToRemove.push(lineItem);
        lineItem.wsgPrice = lineItem.price;
        lineItem.wsgLinePrice = lineItem.linePrice;
      }
    });
  }); // If we're on the cart page, we can now throw an alert and remove the exclusions. 
  // Otherwise, we're on an ajax cart and we just need to reprice (above) and return the wsgLineItems

  if (!isAjax) {
    if (wsgLineItemsToRemove.length) {
      var updatesData = {
        updates: {}
      };
      var alertMessage;

      if (wsgData.translations.language != "english") {
        var removingAlert = require("../../../helpers/translations/translationFiles/").files[wsgData.translations.language].alertRemoving;

        alertMessage = removingAlert;
      } else {
        alertMessage = "Some items in your cart are not available for wholesale customers. The following items will be removed: \n";
      } // // Build the alert message
      // let alertMessage = 'Some items in your cart are not available for wholesale customers. The following items will be removed: \n'


      wsgLineItemsToRemove.forEach(function (item) {
        var itemInfo = "- " + item.name + " x " + item.quantity + " \n";
        alertMessage += itemInfo;
        updatesData.updates[item.variantId] = 0;
      }); // Send an alert that we're removing the excluded items

      alert(alertMessage); //remove the excluded items from the cart using an ajax call

      _wsgDiscounts.jQuery321.ajax({
        method: 'POST',
        url: '/cart/update.js',
        data: updatesData,
        dataType: 'json'
      }).done(function (cart) {
        console.log('Removed restricted wholesale items'); // when cart is updated reload the page. 
        // Is there a better way to do this than a timeout?

        window.location.href = '/cart';
      }).fail(function (err) {
        console.log(err);
      });
    }
  }

  return wsgLineItems;
}; //deals with overordering issues


exports.checkInventory = function (wsgLineItems) {
  //convert stock data to valid JSON then in js object for parsing
  //unless this has already been done (meaning this is an AJAX cart)
  if ((typeof wsgStockData === "undefined" ? "undefined" : _typeof(wsgStockData)) !== 'object') {
    wsgStockData = wsgStockData.slice(0, -1);
    wsgStockData = '{' + wsgStockData + '}';
    wsgStockData = JSON.parse(wsgStockData);
  }

  var updateCart = false;
  var newCartQtys = [];
  var overOrdered = {};
  var containsBackorder = false; //Cycle through line items, compare against cart stock data, and see if any are overordered

  wsgLineItems.forEach(function (lineItem) {
    if (wsgStockData[lineItem.lineItemId].stock < 0) {
      //set to 0 if negative to avoid loop
      wsgStockData[lineItem.lineItemId].stock = 0;
    }

    if (lineItem.quantity > wsgStockData[lineItem.lineItemId].stock && wsgData.shop_preferences.checkInventory) {
      //item is overordered
      if (wsgStockData[lineItem.lineItemId].policy === 'deny') {
        //product is overordered and that's not ok
        overOrdered[lineItem.lineItemId] = {
          "title": lineItem.name,
          "origQty": lineItem.quantity,
          "maxAvail": wsgStockData[lineItem.lineItemId].stock
        }; //push max avail to arry to update cart later

        newCartQtys.push(wsgStockData[lineItem.lineItemId].stock);
        updateCart = true;
      } else {
        //item is overordered but that's ok: contains a backorder
        containsBackorder = true; //fill in backorder modal

        var shipDate = '';

        if (wsgStockData[lineItem.lineItemId].shipDate) {
          shipDate = "  -  <em data-translation-selector=\"ships\">Ships ".concat(wsgStockData[lineItem.lineItemId].shipDate, "</em>");
        }

        (0, _wsgDiscounts.jQuery321)('#backorder-items').append("<p>".concat(lineItem.name).concat(shipDate, "</p>"));
        var lineMessage = "Backordered" + shipDate;
        newCartQtys.push(lineItem.quantity);
      }
    } else {
      //product not overordered, push quantity to
      newCartQtys.push(lineItem.quantity);
    }
  }); //if overordered alert user, update cart, and reload page

  if (updateCart) {
    var errorInventoryText;
    var qtyTranslation; // if translations are running/not set to English, grab only the alert text needed for this page

    if (wsgData.translations.language != 'english') {
      var inventoryAlert = require('../../../helpers/translations/translationFiles').files[wsgData.translations.language].alertInventoryError;

      errorInventoryText = inventoryAlert;
      qtyTranslation = require('../../../helpers/translations/translationFiles').files[wsgData.translations.language].quantity;
    } else {
      errorInventoryText = "There is not enough inventory to fill some items in your cart. Items will be updated to our maximum available quantity.\n";
      qtyTranslation = "Quantity: ";
    }

    var itemsChanged = "";

    _wsgDiscounts.jQuery321.each(overOrdered, function (k, v) {
      itemsChanged += "\n" + v.title + ":\n" + qtyTranslation + v.origQty + " --> " + v.maxAvail + "\n";
    });

    alert(errorInventoryText + itemsChanged); //items overordered, update cart and reload page

    var params = {
      type: 'POST',
      url: '/cart/update.js',
      data: {
        updates: newCartQtys
      },
      dataType: 'json',
      success: function success(cart) {
        window.location.reload(true);
      },
      error: function error(XMLHttpRequest, textStatus) {
        console.log('error changing cart: ' + textStatus);
      }
    };

    _wsgDiscounts.jQuery321.ajax(params);
  } //if any item is backordered show backorderd message


  if (containsBackorder && wsgData.shop_preferences.showShipPartial) {
    //show ship partial options
    (0, _wsgDiscounts.jQuery321)('.wsg-ship-partial').attr('style', 'display: block');
  } else {
    (0, _wsgDiscounts.jQuery321)('.wsg-ship-partial').attr('style', 'display: none');
    containsBackorder = false;
  }

  return containsBackorder;
}; //return array of quantity error messages


exports.checkQuantity = function (wsgLineItems, subtotal) {
  var quantityErrors = [],
      totals = {
    collections: {},
    products: {} //minimum $

  };
  var minOrder = wsgData.shop_preferences.minOrder;

  if (subtotal < minOrder * 100 && minOrder != -1) {
    var msg = "<span data-translation-selector='cartSubtotal'>Cart subtotal must be at least </span>" + wsgShopify.formatMoney(minOrder * 100);
    quantityErrors.push(msg);
  } //avoid undefined errors on old shops


  if (wsgData.quantity) {
    //CART TOTALS
    if (wsgData.quantity.cart) {
      var totalMin = wsgData.quantity.cart.totalMin || 0;
      var totalMult = wsgData.quantity.cart.totalMult || 1;
      var totalMax = wsgData.quantity.cart.totalMax || false;
      var itemMin = wsgData.quantity.cart.itemMin || 0;
      var itemMult = wsgData.quantity.cart.itemMult || 1;
      var itemMax = wsgData.quantity.cart.itemMax || false; //min quantity

      if (wsgCart.item_count < totalMin) {
        var _msg = "<span data-translation-selector='cartMinimum'>Cart must have a minimum of </span>" + totalMin + "<span data-translation-selector='totalCurrentTotal'> total items.  Current total: </span>" + wsgCart.item_count;

        quantityErrors.push(_msg);
      } //mult


      if (wsgCart.item_count % totalMult != 0) {
        var _msg2 = "<span data-translation-selector='totalItemMultiple'>Total items in cart must be a multiple of </span>" + totalMult;

        quantityErrors.push(_msg2);
      } //max


      if (totalMax) {
        if (wsgCart.item_count > totalMax) {
          var _msg3 = "<span data-translation-selector='totalLessThan'>Total items in cart must be less than </span>" + (totalMax + 1) + "<span data-translation-selector='currentTotal'>. Current total: </span>" + wsgCart.item_count;

          quantityErrors.push(_msg3);
        }
      }
    } //cycle through line items and add quantities


    var minWarning = false,
        multWarning = false,
        maxWarning = false;
    wsgLineItems.forEach(function (lineItem) {
      //CART - individual items
      if (lineItem.quantity < itemMin) {
        if (!minWarning) {
          var _msg4 = "<span data-translation-selector='minimumOf'>Minimum of </span>" + itemMin + "<span data-translation-selector='forEachItem'> for each item in cart</span>";

          quantityErrors.push(_msg4);
          minWarning = true;
        }
      }

      if (lineItem.quantity % itemMult != 0) {
        if (!multWarning) {
          var _msg5 = "<span data-translation-selector='eachItemMultiple'>Each item in cart must be a multiple of </span>" + itemMult;

          quantityErrors.push(_msg5);
          multWarning = true;
        }
      }

      if (itemMax) {
        if (lineItem.quantity > itemMax) {
          if (!maxWarning) {
            var _msg6 = "<span data-translation-selector='maximumOf'>Maximum of </span>" + itemMax + " <span data-translation-selector='forEachItem'> for each item in cart</span>";

            quantityErrors.push(_msg6);
            maxWarning = true;
          }
        }
      } //COLLECTION
      //add collection id to counter


      lineItem.collections.forEach(function (collectionId) {
        //if already exists add count, else set count
        if (totals.collections[collectionId]) {
          totals.collections[collectionId] += lineItem.quantity;
        } else {
          totals.collections[collectionId] = lineItem.quantity;
        } //check individual collection rules


        wsgData.quantity.collections.forEach(function (collectionRule) {
          if (collectionRule.id == collectionId) {
            //matching rule
            var rules = collectionRule.rules;
            var total = lineItem.quantity;

            for (var key in rules) {
              if (key == "indivMin") {
                if (total < rules[key]) {
                  var _msg7 = lineItem.title + "<span data-translation-selector='singleMinimumOf'>: minimum of </span>" + rules[key] + "<span data-translation-selector='perItemIn'> per item in </span>" + collectionRule.name;

                  quantityErrors.push(_msg7);
                }
              }

              if (key == "indivMult") {
                if (total % rules[key] != 0) {
                  var _msg8 = lineItem.title + "<span data-translation-selector='eachItemIn'>: each item in </span>" + collectionRule.name + "<span data-translation-selector='mustBeMultiple'>: must be a multiple of </span>" + rules[key];

                  quantityErrors.push(_msg8);
                }
              }

              if (key == "indivMax") {
                if (total > rules[key]) {
                  var _msg9 = lineItem.title + "<span data-translation-selector='singleMaxOf'>: maximum of </span>" + rules[key] + "<span data-translation-selector='perItemIn'> per item in </span>" + collectionRule.name;

                  quantityErrors.push(_msg9);
                }
              }
            }
          }
        });
      }); //PRODUCT
      //add count of product variants

      if (totals.products[lineItem.productId]) {
        totals.products[lineItem.productId] += lineItem.quantity;
      } else {
        totals.products[lineItem.productId] = lineItem.quantity;
      } //check for individual VARIANT rules


      wsgData.quantity.products.forEach(function (productRule) {
        if (productRule.variants) {
          if (productRule.id == lineItem.productId) {
            var variants = productRule.variants; // console.log(variants)

            if (variants.min) {
              if (lineItem.quantity < variants.min) {
                var _msg10 = lineItem.title + "<span data-translation-selector='singleMinimumOf'>: minimum of </span>" + variants.min + " per variant";

                quantityErrors.push(_msg10);
              }
            }

            if (variants.mult) {
              if (lineItem.quantity % variants.mult != 0) {
                var _msg11 = lineItem.title + "<span data-translation-selector='mustBeMultiple'>: must be a multiple of </span>" + variants.mult;

                quantityErrors.push(_msg11);
              }
            }

            if (variants.max) {
              if (lineItem.quantity > variants.max) {
                var _msg12 = lineItem.title + ": maximum " + variants.max + " per variant";

                quantityErrors.push(_msg12);
              }
            }
          }
        }
      }); // console.log(lineItem)
    }); //check collection total rules

    wsgData.quantity.collections.forEach(function (collectionRule) {
      for (var key in totals.collections) {
        if (key == collectionRule.id) {
          //matching rule
          var total = totals.collections[key];
          var rules = collectionRule.rules;

          for (var _key in rules) {
            if (_key == "min") {
              if (total < rules[_key]) {
                var _msg13 = "<span data-translation-selector='minimumOf'>Minimum of </span> " + rules[_key] + "<span data-translation-selector='totalItemsFrom'> total items from </span>" + collectionRule.name + "<span data-translation-selector='currentTotal'>. Current total: </span>" + total;

                quantityErrors.push(_msg13);
              }
            }

            if (_key == "mult") {
              if (total % rules[_key] != 0) {
                var _msg14 = "<span data-translation-selector='totalItemsIn'>Total items in </span>" + collectionRule.name + "<span data-translation-selector='mustBeMultiple'> must be a multiple of </span>" + rules[_key];

                quantityErrors.push(_msg14);
              }
            }

            if (_key == "max") {
              if (total > rules[_key]) {
                var _msg15 = "Maximum of " + rules[_key] + "<span data-translation-selector='totalItemsFrom'> total items from </span>" + collectionRule.name + "<span data-translation-selector='currentTotal'>. Current total: </span>" + total;

                quantityErrors.push(_msg15);
              }
            }
          }
        }
      }
    }); //check product total rules

    wsgData.quantity.products.forEach(function (productRule) {
      if (productRule.rules) {
        for (var key in totals.products) {
          if (key == productRule.id) {
            //matching rule
            var rules = productRule.rules;

            if (rules.min) {
              if (totals.products[key] < rules.min) {
                var _msg16 = productRule.name + "<span data-translation-selector='singleMinimumOf'>: minimum of </span>" + rules.min + " per order";

                quantityErrors.push(_msg16);
              }
            }

            if (rules.mult) {
              if (totals.products[key] % rules.mult != 0) {
                var _msg17 = productRule.name + "<span data-translation-selector='mustBeMultiple'>: must be a multiple of </span>" + rules.mult;

                quantityErrors.push(_msg17);
              }
            }

            if (rules.max) {
              if (totals.products[key] > rules.max) {
                var _msg18 = productRule.name + "<span data-translation-selector='singleMaxOf'>: maximum of </span>" + rules.max + " per order";

                quantityErrors.push(_msg18);
              }
            }
          }
        }
      }
    });
  } // console.log(totals)


  return quantityErrors;
};

function checkIndivCollection(collectionRule, total, name) {
  var rules = collectionRule.rules;
  var msg = false;

  for (var key in rules) {
    //individual line item rules
    if (key == "indivMin") {
      if (total < rules[key]) {
        msg = name + "<span data-translation-selector='singleMinimumOf'>: minimum of </span>" + rules[key] + "<span data-translation-selector='perItemIn'> per item in </span>" + collectionRule.name;
      }
    } else if (key == "indivMult") {
      if (total % rules[key] != 0) {
        msg = name + "<span data-translation-selector='eachItemIn'>: each item in </span>" + collectionRule.name + "<span data-translation-selector='mustBeMultiple'>: must be a multiple of </span>" + rules[key];
      }
    } else if (key == "indivMax") {
      if (total > rules[key]) {
        msg = name + "<span data-translation-selector='singleMaxOf'>: maximum of </span>" + rules[key] + "<span data-translation-selector='perItemIn'> per item in </span>" + collectionRule.name;
      }
    }
  }

  return msg;
}

module.exports = exports;

},{"../../../helpers/translations/translationFiles":5,"../../../helpers/translations/translationFiles/":5,"../../wsg-discounts.js":26,"../discountCalculators":14}],11:[function(require,module,exports){
"use strict";

var _wsgDiscounts = require("../../wsg-discounts.js");

//================== CHECKOUT PROCESS =======================  
//This file runs in the browser
//========================================
var shipping = require('./shipping');

var wsgCountryCode = false;

if (typeof wsgShopCountryCode != 'undefined') {
  wsgCountryCode = wsgShopCountryCode;
} //put together the json of the order to send to shopify


exports.checkout = function (shippingAddress, wsgLineItems, containsBackorder, subtotal) {
  //add order note
  var tagWholesale = "Wholesale Order: " + shippingAddress.company; //check if you need to add backorder message

  if (containsBackorder) {
    tagWholesale += "\nShipping instructions: " + (0, _wsgDiscounts.jQuery321)("input:radio[name='wsg-ship-option']:checked").val();
  }

  var noteSel = '.wsg-note';

  if ((0, _wsgDiscounts.jQuery321)(noteSel).length > 0) {
    if ((0, _wsgDiscounts.jQuery321)(noteSel).val()) {
      tagWholesale += "\nCustomer Note: " + (0, _wsgDiscounts.jQuery321)(noteSel).val();
    }
  } else {
    noteSel = "textarea";

    if ((0, _wsgDiscounts.jQuery321)(noteSel).length > 0) {
      if ((0, _wsgDiscounts.jQuery321)(noteSel).val()) {
        tagWholesale += "\nCustomer Note: " + (0, _wsgDiscounts.jQuery321)(noteSel).val();
      }
    }
  } //check for net order


  var netOrder = false;

  if (wsgData.net_orders.enabled) {
    wsgCustomerTags.forEach(function (tag) {
      if (wsgData.net_orders.netTag === tag) {
        netOrder = true; // console.log('netOrder')
      }
    });
  } //check for shipping discount rules and get updated shipping rates before submitting draft order


  shipping.getShippingRates(subtotal, shippingAddress.zip, shippingAddress.country, shippingAddress.province, function (shippingLine, err) {
    if (err) {
      var errorAlertText; // if translations are running/not set to English, grab only the alert text needed for this page

      if (wsgData.translations.language != 'english') {
        var shippingAlert = require('../../../helpers/translations/translationFiles/').files[wsgData.translations.language].alertShippingError;

        errorAlertText = shippingAlert;
      } else {
        errorAlertText = 'There was a problem calculating your shipping, please verify all fields are correct and try again.\nIf the problem persists please contact us for assistance.';
      }

      console.log(err);
      (0, _wsgDiscounts.jQuery321)("#wsg-checkout-two").prop("disabled", false);
      shipping.displayModal('off');
      alert(errorAlertText);
    } else {
      //check for international or net order
      if (netOrder) {
        submitDraftOrder(wsgLineItems, shippingAddress, tagWholesale, shippingLine, 'netRedirect');
        return;
      }

      if (wsgData.shipping_rates.redirectInternational == true) {
        var redirectInt = false;

        if (wsgCountryCode == false) {
          //old method
          if (wsgShopCountry != shippingAddress.country) {
            redirectInt = true;
          }
        } else {
          if (wsgCountryCode != shippingAddress.country_code) {
            redirectInt = true;
          }
        }

        if (redirectInt) {
          submitDraftOrder(wsgLineItems, shippingAddress, tagWholesale, shippingLine, 'internationalRedirect');
          return;
        }
      } //submit regular order


      submitDraftOrder(wsgLineItems, shippingAddress, tagWholesale, shippingLine, null);
    }
  });
};

function submitDraftOrder(wsgLineItems, shippingAddress, tagWholesale, shippingLine, forceRedirect) {
  //build the order object to send to wsg server
  var custTags = wsgCustomerTags.join(', ');
  var orderReq = {
    forceRedirect: forceRedirect,
    draftOrder: {
      draft_order: {
        line_items: [],
        note: tagWholesale,
        customer: {
          id: wsgCustomerId
        },
        // In the future when you want to give the customer the option to use default address
        // you can make this a variable.
        //use_customer_default_address: true,  
        "shipping_address": {
          "address1": shippingAddress.address1,
          "address2": shippingAddress.address2,
          "city": shippingAddress.city,
          "company": shippingAddress.company,
          "country": shippingAddress.country,
          "first_name": shippingAddress.firstName,
          "last_name": shippingAddress.lastName,
          "province": shippingAddress.province,
          "zip": shippingAddress.zip
        },
        "tags": 'wholesale, ' + custTags
      }
    }
  }; //if there are shipping rules add them to draft order

  if (shippingLine) {
    orderReq.draftOrder.draft_order.shipping_line = {
      "custom": shippingLine.custom,
      "handle": "",
      "price": shippingLine.price,
      "title": shippingLine.title
    };
  }

  var taxSubtotal = 0; //go through each item in the cart and add to draftOrder line_items

  wsgLineItems.forEach(function (item) {
    //calculate discount of item
    var appliedDiscount = calcWSGPrice(item.price, item.wsgPrice, item.quantity); // console.log(item)

    var tempLineItem = {
      //item.handle, 
      "id": item.lineItemId,
      "price": item.price,
      "product_id": item.productId,
      "name": item.productTitle,
      "quantity": item.quantity,
      "requires_shipping": item.requiresShipping,
      "sku": item.sku,
      "taxable": item.taxable,
      "grams": item.grams,
      "vendor": item.vendor,
      "variant_id": item.variantId,
      "variant_title": item.variantTitle,
      "applied_discount": appliedDiscount
    };

    if (item.properties) {
      var propArray = [];

      for (var key in item.properties) {
        propArray.push({
          name: key,
          value: item.properties[key]
        });
      }

      tempLineItem.properties = propArray;
    }

    if (tempLineItem.taxable == true) {
      if (Number(appliedDiscount.amount) > 0) {
        // console.log("origPrice: " +item.linePrice)
        // console.log("centsPrice: " + centsPrice)
        // console.log("appliedDiscount.amount: " + appliedDiscount.amount)
        var centsPrice = item.linePrice / 100;
        taxSubtotal += Number(centsPrice - appliedDiscount.amount);
      } else {
        taxSubtotal += item.linePrice / 100;
      }
    }

    orderReq.draftOrder.draft_order.line_items.push(tempLineItem);
  }); //check to see if EU tax line needs to be added

  var addDomTax = false;

  if (wsgData.shop_preferences.taxRate > 0) {
    if (wsgCountryCode == false) {
      //old method
      if (wsgShopCountry == shippingAddress.country) {
        addDomTax = true;
      }
    } else {
      if (wsgCountryCode == shippingAddress.country_code) {
        addDomTax = true;
      }
    }
  }

  if (addDomTax) {
    var taxRate = wsgData.shop_preferences.taxRate / 100; //  var tax = (taxRate * taxSubtotal) / (1 + taxRate);

    var tax = taxRate * taxSubtotal;
    tax = roundPrice(tax); //  console.log("tax: " + tax)
    //  console.log("taxRate: " + taxRate)

    if (tax > 0) {
      orderReq.draftOrder.draft_order.line_items.push({
        "title": "Taxes",
        "price": Number(tax),
        "quantity": 1
      });
    }
  } // console.log(orderReq)
  //when done creating draftOrder post cart to server 
  //this is a proxy route, actual app route is a POST to /checkout


  var wsgCheckoutUrl = '/a/wsg/checkout';

  _wsgDiscounts.jQuery321.ajax({
    type: "POST",
    url: wsgCheckoutUrl,
    data: orderReq
  }).done(function (checkoutUrl) {
    if (checkoutUrl.indexOf('wsgInvoiceUrl') !== -1) {
      //met order, clear cart and redirect
      _wsgDiscounts.jQuery321.ajax({
        type: "POST",
        url: '/cart/clear.js',
        //   success: function(){
        //   },
        dataType: 'json'
      }).always(function () {
        window.location.replace(checkoutUrl);
      }).catch(function (err) {
        console.log(err);
      });
    } else if (checkoutUrl == null) {
      var errorAlertText; // if translations are running/not set to English, grab only the alert text needed for this page

      if (wsgData.translations.language != 'english') {
        var processingAlert = require('../../../helpers/translations/translationFiles/').files[wsgData.translations.language].alertOrderProcessingError;

        errorAlertText = processingAlert;
      } else {
        errorAlertText = "We're sorry, there was an error processing your order.  Please try again. \n\nIf the problem persists please contact us. \n\n";
      }

      (0, _wsgDiscounts.jQuery321)("#wsg-checkout-two").prop("disabled", false);
      alert(errorAlertText + checkoutUrl);
    } else {
      var delay = 100; //a Shopify Plus store had an error where the draft URL wasn't ready even though it was sent.  
      //This is a temporary fix until we hear back from Shopify.  Add wsgDelayInvoice to header if needed. 

      if (typeof wsgDelayInvoice != "undefined") {
        delay = wsgDelayInvoice;
      }

      setTimeout(function () {
        window.location.replace(checkoutUrl);
      }, delay);
    }
  }).fail(function (jqXHR, textStatus, errorThrown) {
    console.log("Checkout error - see server logs for details");
    shipping.displayModal('off');
    var errorAlertTextFail; // if translations are running/not set to English, grab only the alert text needed for this page

    if (wsgData.translations.language != 'english') {
      var processingAlert = require('../../../helpers/translations/translationFiles/').files[wsgData.translations.language].alertOrderProcessingError;

      errorAlertTextFail = processingAlert;
    } else {
      errorAlertTextFail = "We're sorry, there was an error processing your order.  Please try again. \n\nIf the problem persists please contact us. \n\n";
    }

    (0, _wsgDiscounts.jQuery321)("#wsg-checkout-two").prop("disabled", false);
    alert(errorAlertTextFail);
  });
} //======= generate discount rule to pass to draft order ======


function calcWSGPrice(itemPrice, wsgPrice, qty) {
  var value, amount;
  var valueType = "fixed_amount"; //get how much the prod is discounted	

  value = (itemPrice - wsgPrice) / 100;

  if (wsgShopCountry == "Japan" || wsgShopCountry == "日本") {
    value = Math.round(value);
  } //calc total discount


  amount = value * qty; //round

  value = roundPrice(value);
  amount = roundPrice(amount);
  return {
    "title": "Wholesale Discount",
    "description": "Wholesale Price",
    "value": value,
    "value_type": valueType,
    "amount": amount
  };
}

function roundPrice(x) {
  return x.toFixed(2);
}

module.exports = exports;

},{"../../../helpers/translations/translationFiles/":5,"../../wsg-discounts.js":26,"./shipping":13}],12:[function(require,module,exports){
"use strict";

var _wsgDiscounts = require("../../wsg-discounts.js");

var cart = require('../../pages/cart');

//listen for dom changes in cart and update wsg calcs if necessary
exports.run = function () {// var MutationObserver = window.MutationObserver || window.WebKitMutationObserver;
  // var observer = new MutationObserver(function(mutations, observer) {
  //     // fired when a mutation occurs
  //     let domChanged = false;
  //     //check if wsg-line-price spans still exist, if they don't recalc cart
  //     for(let key in wsgStockData){
  //         let selector = '.wsg-line-price_' + key;
  //         if($(selector).length < 1){
  //             domChanged = true;
  //         }
  //     }
  //     if(domChanged){
  //         //if the dom has been changed reload the page
  //         window.location.reload(true);
  //     }
  // });
  // // define what element should be observed by the observer
  // // and what types of mutations trigger the callback
  // observer.observe(document, {
  //   subtree: true,
  //   attributes: true
  //   //...
  // });
};

module.exports = exports;

},{"../../pages/cart":19,"../../wsg-discounts.js":26}],13:[function(require,module,exports){
"use strict";

var _wsgDiscounts = require("../../wsg-discounts.js");

//===============================
//    runs in browser
//===============================
var _require = require('country-list'),
    getCode = _require.getCode,
    getName = _require.getName;

var wsgCartProxy = false;

exports.initShippingModal = function (callback) {
  //check to see if we are on the proxy page or theme default cart page
  var currentUrl = window.location.href;

  if (currentUrl.indexOf("a/wsg/proxy/ws-cart") > -1) {
    wsgCartProxy = true;
  } //open shipping modal popup


  exports.displayModal('init'); //all the selector names for the address form

  var firstName = '#wsg-form-firstname',
      lastName = '#wsg-form-lastname',
      storeName = '#wsg-form-storename',
      address1 = '#wsg-form-address1',
      address2 = '#wsg-form-address2',
      city = '#wsg-form-city',
      province = '#wsg-form-province',
      zip = '#wsg-form-zip',
      country = '#wsg-form-country'; //if we are on the proxy cart don't run the modal popup stuff

  if (wsgCartProxy == false) {
    //close shipping modal if clicked 'close'
    var shippingModalClose = document.getElementById('wsg-modal-close');

    shippingModalClose.onclick = function () {
      clearValidationWarnings(storeName, address1, city, zip);
      (0, _wsgDiscounts.jQuery321)('#wsg-continue-checkout').off();
      exports.displayModal('off');
    }; //close shipping modal if clicked outside of it


    window.onmousedown = function (event) {
      var shippingModal = document.getElementById('wsg-ship-modal');

      if (event.target == shippingModal) {
        clearValidationWarnings(storeName, address1, city, zip);
        (0, _wsgDiscounts.jQuery321)('#wsg-continue-checkout').off();
        exports.displayModal('off');
      }
    };
  } else {
    clearValidationWarnings(storeName, address1, city, zip);
  } //listeners to turn off required field styles on change in case they are on


  (0, _wsgDiscounts.jQuery321)(storeName).change(function () {
    (0, _wsgDiscounts.jQuery321)('#wsgStoreNameReq').addClass('wsg-hide-req').removeClass('wsg-show-req');
    (0, _wsgDiscounts.jQuery321)(this).removeClass('wsg-input-req');
  });
  (0, _wsgDiscounts.jQuery321)(address1).change(function () {
    (0, _wsgDiscounts.jQuery321)('#wsgAddress1Req').addClass('wsg-hide-req').removeClass('wsg-show-req');
    (0, _wsgDiscounts.jQuery321)(this).removeClass('wsg-input-req');
  });
  (0, _wsgDiscounts.jQuery321)(city).change(function () {
    (0, _wsgDiscounts.jQuery321)('#wsgCityReq').addClass('wsg-hide-req').removeClass('wsg-show-req');
    (0, _wsgDiscounts.jQuery321)(this).removeClass('wsg-input-req');
  });
  (0, _wsgDiscounts.jQuery321)(zip).change(function () {
    (0, _wsgDiscounts.jQuery321)('#wsgZipReq').addClass('wsg-hide-req').removeClass('wsg-show-req');
    (0, _wsgDiscounts.jQuery321)(this).removeClass('wsg-input-req');
  });
  (0, _wsgDiscounts.jQuery321)(country).change(function () {
    (0, _wsgDiscounts.jQuery321)('#wsgCountryReq').addClass('wsg-hide-req').removeClass('wsg-show-req');
    (0, _wsgDiscounts.jQuery321)(this).removeClass('wsg-input-req');
  }); // Populate shipping modal with current customer's default address.
  //get index of default address

  var addressIndex = 0;

  for (var i = 0; i < wsgCustomerAddresses.length; i++) {
    if (wsgCustomerAddresses[i].default == true) {
      addressIndex = i;
      break;
    }
  } //pupulate inputs


  if (wsgCustomerAddresses[addressIndex]) {
    (0, _wsgDiscounts.jQuery321)(firstName).val(wsgCustomerAddresses[addressIndex].first_name);
    (0, _wsgDiscounts.jQuery321)(lastName).val(wsgCustomerAddresses[addressIndex].last_name);
    (0, _wsgDiscounts.jQuery321)(storeName).val(wsgCustomerAddresses[addressIndex].company);
    (0, _wsgDiscounts.jQuery321)(address1).val(wsgCustomerAddresses[addressIndex].address1);
    (0, _wsgDiscounts.jQuery321)(address2).val(wsgCustomerAddresses[addressIndex].address2);
    (0, _wsgDiscounts.jQuery321)(city).val(wsgCustomerAddresses[addressIndex].city);
    (0, _wsgDiscounts.jQuery321)(zip).val(wsgCustomerAddresses[addressIndex].zip); // Set the country to the logged in customer's default country. 

    var hasOption = (0, _wsgDiscounts.jQuery321)(country + " option").filter(function (index) {
      return (0, _wsgDiscounts.jQuery321)(this).val() == wsgCustomerAddresses[addressIndex].country; //check to see that customer country exists as option on store
    });

    if (hasOption.length > 0) {
      (0, _wsgDiscounts.jQuery321)(country).attr('data-default', wsgCustomerAddresses[addressIndex].country); //country exists, set select to build based on customer country
    }
  } //init country/province selector


  try {
    new wsgShopify.CountryProvinceSelector('wsg-form-country', 'wsg-form-province', 'wsg-form-province');

    if (wsgCustomerAddresses[addressIndex]) {
      (0, _wsgDiscounts.jQuery321)(province).val(wsgCustomerAddresses[addressIndex].province); //set customer default province if it exists
    }
  } catch (err1) {
    //no shipping zones are set up
    console.log(err1);
    console.log("Error building Country/Province selector.  Store likely has no shipping zones set up.");

    if (window.location.href.indexOf("wsgTestMode") > -1) {
      (0, _wsgDiscounts.jQuery321)(".wsg-checkout-two").prepend("<p style='color: red'>Error building Country/Province selector.<br>See console for details.</p>");
    }
  } //======================================
  //        Submit Shipping Modal 
  //======================================
  //if using proxy cart


  (0, _wsgDiscounts.jQuery321)("#wsg-checkout-two").off("click.submitOrder").on("click.submitOrder", function () {
    event.stopPropagation();
    event.preventDefault();
    (0, _wsgDiscounts.jQuery321)(this).prop("disabled", true);
    var addressValid = validateShippingModal(storeName, address1, city, zip);

    if (addressValid) {
      //create object of saved address data
      var shippingAddress = getShippingAddress();
      callback(shippingAddress);
    } else {
      (0, _wsgDiscounts.jQuery321)(this).prop("disabled", false);
    }
  }); //if using default theme cart:

  (0, _wsgDiscounts.jQuery321)('#wsg-continue-checkout').off("click.submitOrder").on('click.submitOrder', function (e) {
    e.preventDefault(); //check form validity and then submit

    var addressValid = validateShippingModal(storeName, address1, city, zip);

    if (addressValid) {
      //create object of saved address data
      var shippingAddress = getShippingAddress();
      exports.displayModal('loading');
      callback(shippingAddress);
    }
  });

  function getShippingAddress() {
    var shippingAddress = {
      'firstName': (0, _wsgDiscounts.jQuery321)(firstName).val(),
      'lastName': (0, _wsgDiscounts.jQuery321)(lastName).val(),
      'company': (0, _wsgDiscounts.jQuery321)(storeName).val(),
      'address1': (0, _wsgDiscounts.jQuery321)(address1).val(),
      'address2': (0, _wsgDiscounts.jQuery321)(address2).val(),
      'city': (0, _wsgDiscounts.jQuery321)(city).val(),
      'province': (0, _wsgDiscounts.jQuery321)(province).val(),
      'zip': (0, _wsgDiscounts.jQuery321)(zip).val(),
      'country': (0, _wsgDiscounts.jQuery321)(country).val()
    };
    var code = getCode((0, _wsgDiscounts.jQuery321)(country).val());

    if (typeof code != "undefined") {
      shippingAddress.country_code = code;
    }

    return shippingAddress;
  }
};

function clearValidationWarnings(storeName, address1, city, zip) {
  (0, _wsgDiscounts.jQuery321)('#wsgStoreNameReq').addClass('wsg-hide-req').removeClass('wsg-show-req');
  (0, _wsgDiscounts.jQuery321)(storeName).removeClass('wsg-input-req');
  (0, _wsgDiscounts.jQuery321)('#wsgAddress1Req').addClass('wsg-hide-req').removeClass('wsg-show-req');
  (0, _wsgDiscounts.jQuery321)(address1).removeClass('wsg-input-req');
  (0, _wsgDiscounts.jQuery321)('#wsgCityReq').addClass('wsg-hide-req').removeClass('wsg-show-req');
  (0, _wsgDiscounts.jQuery321)(city).removeClass('wsg-input-req');
  (0, _wsgDiscounts.jQuery321)('#wsgZipReq').addClass('wsg-hide-req').removeClass('wsg-show-req');
  (0, _wsgDiscounts.jQuery321)(zip).removeClass('wsg-input-req');
  (0, _wsgDiscounts.jQuery321)('#wsgCountryReq').addClass('wsg-hide-req').removeClass('wsg-show-req');
  (0, _wsgDiscounts.jQuery321)("#wsg-form-country").removeClass('wsg-input-req');
}

function validateShippingModal(storeName, address1, city, zip) {
  //legacy shops already had the cart form so we couldn't use browser validation.  New proxy page carts don't need validation
  var validated = true; //check to see if any values are blank
  //   if ($(storeName).val() == '') {
  //     //storeName is blank
  //     $('#wsgStoreNameReq').removeClass('wsg-hide-req').addClass('wsg-show-req');
  //     $(storeName).addClass('wsg-input-req');
  //     validated = false;
  //   }

  if (!(0, _wsgDiscounts.jQuery321)(address1).val()) {
    //storeName is blank
    (0, _wsgDiscounts.jQuery321)('#wsgAddress1Req').removeClass('wsg-hide-req').addClass('wsg-show-req');
    (0, _wsgDiscounts.jQuery321)(address1).addClass('wsg-input-req');
    validated = false;
  }

  if (!(0, _wsgDiscounts.jQuery321)(city).val()) {
    //storeName is blank
    (0, _wsgDiscounts.jQuery321)('#wsgCityReq').removeClass('wsg-hide-req').addClass('wsg-show-req');
    (0, _wsgDiscounts.jQuery321)(city).addClass('wsg-input-req');
    validated = false;
  }

  if (!(0, _wsgDiscounts.jQuery321)(zip).val()) {
    //zip is blank
    (0, _wsgDiscounts.jQuery321)('#wsgZipReq').removeClass('wsg-hide-req').addClass('wsg-show-req');
    (0, _wsgDiscounts.jQuery321)(zip).addClass('wsg-input-req');
    validated = false;
  }

  if (!(0, _wsgDiscounts.jQuery321)("#wsg-form-country").val()) {
    (0, _wsgDiscounts.jQuery321)('#wsgCountryReq').removeClass('wsg-hide-req').addClass('wsg-show-req');
    (0, _wsgDiscounts.jQuery321)("#wsg-form-country").addClass('wsg-input-req');
    validated = false;
  }

  return validated;
} //returns lowest rate available


exports.getShippingRates = function (subtotal, zip, country, province, callback) {
  var shippingParams = '/cart/shipping_rates.json?shipping_address%5Bzip%5D=' + zip + '&shipping_address%5Bcountry%5D=' + country + '&shipping_address%5Bprovince%5D=' + province;
  var shippingOptions = [];
  var lowestRate;

  if (wsgData.shipping_rates.useShopifyDefault == false) {
    //NOTE: this is kind of bizarre, and not the easiest workflow since we've added a bunch of features
    //when you make the next big update to select indiv rates you should rewrite this
    _wsgDiscounts.jQuery321.get(shippingParams, function (res) {}).done(function (res) {
      console.log('original rates:');
      console.log(res.shipping_rates); //if ignore carrier = true, delete carrier calc rates from array

      var ignoreCarrier;

      if (typeof wsgData.shipping_rates.ignoreCarrierRates != 'undefined') {
        ignoreCarrier = wsgData.shipping_rates.ignoreCarrierRates;
      } else {
        ignoreCarrier = false;
      }

      if (ignoreCarrier) {
        //if rate.source != shopify, delete froma array
        res.shipping_rates = res.shipping_rates.filter(function (value, index, arr) {
          if (value.source == "shopify") {
            return value;
          }
        });
      } //create array of objects with all possible rates


      res.shipping_rates.forEach(function (rate) {
        //ignoreAll means ignore Shopify rates
        //if ignoreAll is false, only exclude free rate (this is default)
        if (!wsgData.shipping_rates.ignoreAll) {
          //false - ignore free shopify rates
          if (Number(rate.price) !== 0) {
            //push non-free shopify rates to array
            shippingOptions.push({
              "custom": true,
              "handle": "",
              "price": Number(rate.price),
              "title": rate.name
            });
          }
        } else {
          //true exclude ALL shopify rates (price and weight)
          if (rate.source !== 'shopify') {
            //push non-free shopify rates to array
            shippingOptions.push({
              "custom": true,
              "handle": "",
              "price": Number(rate.price),
              "title": rate.name
            });
          }
        }
      }); //calculate WSG shipping rules and add to array
      //FREE - with minimum subtotal

      if (wsgData.shipping_rates.freeShippingMin >= 0) {
        if (subtotal >= wsgData.shipping_rates.freeShippingMin) {
          shippingOptions.push({
            "custom": true,
            "handle": "",
            "price": 0,
            "title": "Free Shipping"
          });
        }
      } //FIXED RATES - % of order


      if (wsgData.shipping_rates.fixedPercent > 0) {
        var fixedRate = roundPrice(subtotal * wsgData.shipping_rates.fixedPercent / 100);
        shippingOptions.push({
          "custom": true,
          "handle": "",
          "price": fixedRate,
          "title": "Shipping Fee"
        });
      } //FLAT - just one flat rate


      if (wsgData.shipping_rates.flatRate >= 0) {
        shippingOptions.push({
          "custom": true,
          "handle": "",
          "price": wsgData.shipping_rates.flatRate,
          "title": "Flat Rate Shipping"
        });
      } //INTERNATIONAL - don't redirect to checkout, redirect to international page
      //find lowest priced rate in array 


      lowestRate = shippingOptions[0];
      shippingOptions.forEach(function (rate) {
        if (rate.price < lowestRate.price) {
          lowestRate = rate;
        }
      });
      console.log("all rates");
      console.log(shippingOptions);

      if (callback) {
        callback(lowestRate);
      }
    }).fail(function (err) {
      //if it's an error with the zipcode throw err
      if ("zip" in err.responseJSON) {
        callback(lowestRate, err);
      } else {
        //any other errors just send to checkout
        callback(lowestRate);
      }
    });
  } else {
    //run default shopify shipping rates by returning null object
    if (callback) {
      callback(lowestRate);
    }
  }
};

exports.displayModal = function (state) {
  //if we are on the proxy cart we don't need to run these.
  if (wsgCartProxy == false) {
    var shippingModal = document.getElementById('wsg-ship-modal');
    var formSelector = document.querySelector('.wsg-modal-form');
    var loadingSelector = document.querySelector('.wsg-modal-loading'); //open shipping modal

    if (state === 'init') {
      shippingModal.style.display = "block";
      formSelector.style.display = "block";
      loadingSelector.style.display = "none"; //scroll to top

      var pos = (0, _wsgDiscounts.jQuery321)("#wsg-modal-content").offset();
      (0, _wsgDiscounts.jQuery321)(window).scrollTop(pos.top - 50);
    } else if (state === 'off') {
      shippingModal.style.display = "none";
      formSelector.style.display = "block";
      loadingSelector.style.display = "none";
    } else if (state === 'loading') {
      formSelector.style.display = "none";
      loadingSelector.style.display = "block";
    }
  }
};

function roundPrice(x) {
  return x.toFixed(2);
}

module.exports = exports;

},{"../../wsg-discounts.js":26,"country-list":8}],14:[function(require,module,exports){
"use strict";

var _wsgDiscounts = require("../wsg-discounts.js");

//================== GENERAL DISCOUNT FUNCTIONS ========================= 
//calculate discount
exports.calcDiscount = function (discount, origPrice, currentPrice) {
  var newPrice = origPrice;

  if (discount.discountType === "fixed") {
    newPrice = discount.amount; //console.log(`newPrice in calcDiscount: ${newPrice}`);
  } else if (discount.discountType === "percent") {
    newPrice = origPrice * discount.amount;
  }

  if (newPrice < currentPrice) {
    return Math.round(newPrice);
  } else {
    return currentPrice;
  }
}; //this is the newer way of doing it.  Legacy shops only use updatePriceDOM for collection and product updates
//Can combine both at some point to DRY up


exports.updateCollectionDOM = function (prodInfo) {
  //first use any jQuery price selectors to get locations of prices, then use hardcoded spans after 
  var priceSelector = ".wsg-price-" + prodInfo.prodId;
  var compareSelector = '.wsg-compare-selector-' + prodInfo.prodId; //array to hold possible prices to show

  var prices = []; //set proper currency

  if (typeof wsgMoneyFormat != 'undefined') {
    wsgShopify.money_format = wsgMoneyFormat;
  } //----- Section to deal with $0 variants ---------
  //if $0 price exists and there is more than one price to show, skip $0 amount


  for (var key in prodInfo.calculatedPrices) {
    if (Object.keys(prodInfo.calculatedPrices).length > 1) {
      if (typeof prodInfo.calculatedPrices[key] != "undefined") {
        if (prodInfo.calculatedPrices[key].wsgPrice == 0) {
          continue;
        }
      }
    }

    prices.push(prodInfo.calculatedPrices[key]);
  } //if all prices are $0 then add all prices array anyways so we have something to show


  if (prices.length == 0) {
    for (var _key in prodInfo.calculatedPrices) {
      prices.push(prodInfo.calculatedPrices[_key]);
    }
  } //-------- get product minimum price  --------


  var lowestPrice = prices[0].wsgPrice;

  for (var i = 0; i < prices.length; i++) {
    if (prices[i].wsgPrice < lowestPrice) {
      lowestPrice = prices[i].wsgPrice;
    }
  } //-------- update dom with value ----------
  //newer shops with jQuery version


  if (typeof wsgPriceSelectors != "undefined") {
    wsgPriceSelectors.collectionPrices.forEach(function (productSel) {
      //get reference node
      (0, _wsgDiscounts.jQuery321)(prodInfo.domNode).next().find(productSel).text(formatPrice(lowestPrice)); //new shops with jQuery selectors for collection need ajax observer added here.

      if (prodInfo.index == 0 && typeof wsgCollectionObserver != "undefined") {
        if (wsgCollectionObserver == true) {
          (0, _wsgDiscounts.jQuery321)(prodInfo.domNode).next().find(productSel).append("<span id='wsgCollectionChange' style='display:none;'></span>");
        }
      }
    });
  } //legacy or manual shops


  (0, _wsgDiscounts.jQuery321)(priceSelector).each(function () {
    (0, _wsgDiscounts.jQuery321)(this).text(formatPrice(lowestPrice));
  });
}; //change price diaplayed to end user to wsg price 


exports.updatePriceDOM = function (calculatedPrices, prodId, variantId) {
  var priceSelector = ".wsg-price-" + prodId;
  var compareSelector = '.wsg-compare-selector-' + prodId; //set proper currency

  if (typeof wsgMoneyFormat != 'undefined') {
    wsgShopify.money_format = wsgMoneyFormat;
  } //====== COLLECTION ========
  //if no variant Id is passed we are assuming this is for a COLLECTION


  if (typeof variantId === 'undefined') {
    //array to hold possible prices to show
    var prices = []; //----- Section to deal with $0 variants ---------
    //if $0 price exists and there is more than one price to show, skip $0 amount

    for (var key in calculatedPrices) {
      if (Object.keys(calculatedPrices).length > 1) {
        if (typeof calculatedPrices[key] != "undefined") {
          if (calculatedPrices[key].wsgPrice == 0) {
            continue;
          }
        }
      }

      prices.push(calculatedPrices[key]);
    } //if all prices are $0 then add all prices array anyways so we have something to show


    if (prices.length == 0) {
      for (var _key2 in calculatedPrices) {
        prices.push(calculatedPrices[_key2]);
      }
    } //-------- get product minimum price and update DOM --------


    var lowestPrice = prices[0].wsgPrice;

    for (var i = 0; i < prices.length; i++) {
      if (prices[i].wsgPrice < lowestPrice) {
        lowestPrice = prices[i].wsgPrice;
      }
    } //-------- update dom with value ----------
    //newer shops with jQuery version


    if (typeof wsgPriceSelectors != "undefined") {
      wsgPriceSelectors.collectionPrices.forEach(function (productSel) {//get reference node
      });
    } //legacy or manual shops


    (0, _wsgDiscounts.jQuery321)(priceSelector).each(function () {
      (0, _wsgDiscounts.jQuery321)(this).text(formatPrice(lowestPrice));
    });
  } else {
    // PRODUCT level dom updates
    //for shops using new jQuery methods of changing prices
    if (typeof wsgPriceSelectors != "undefined") {
      wsgPriceSelectors.productPrice.forEach(function (productSel) {
        (0, _wsgDiscounts.jQuery321)(productSel).each(function () {
          (0, _wsgDiscounts.jQuery321)(this).text(formatPrice(calculatedPrices[variantId].wsgPrice, calculatedPrices[variantId].origPrice));
        });
      });
    } //for legacy shops or ones with hard-coded span


    (0, _wsgDiscounts.jQuery321)(priceSelector).each(function () {
      (0, _wsgDiscounts.jQuery321)(this).text(formatPrice(calculatedPrices[variantId].wsgPrice, calculatedPrices[variantId].origPrice));
    }); //hide anything added by theme on update that needs to go (especially compare at prices on variant change)

    hideElements();
  }
};

exports.getProductData = function (colDataNode) {
  //return collection item data for stores > v4.0
  //generate object of product data from comment substring
  var prodData = colDataNode.data.substring(colDataNode.data.indexOf("prodData:") + 9, colDataNode.data.lastIndexOf("endProdData"));
  prodData = JSON.parse(prodData);

  if (_wsgDiscounts.jQuery321.isEmptyObject(prodData)) {
    //return null if no data found
    return null;
  } //generate array of collection ids the product belongs to


  var collectionIds = colDataNode.data.substring(colDataNode.data.indexOf("wsgCollections") + 14, colDataNode.data.lastIndexOf("wsgEndCollections"));
  collectionIds = collectionIds.split(","); //turn into an object with key of id to match format of legacy shops

  var collectionData = [];
  collectionIds.forEach(function (id) {
    collectionData.push({
      id: id
    });
  });
  return {
    prodData: prodData,
    collectionData: collectionData
  };
};

function formatPrice(wsgPrice, origPrice) {
  var newPrice;

  if (typeof origPrice != "undefined") {
    //it it's a product update figure out if ws price is lower
    if (wsgPrice < origPrice) {
      newPrice = wsgPrice;
    } else {
      newPrice = origPrice;
    }
  } else {
    //for collections we already have the correct amount to show
    newPrice = wsgPrice;
  }

  newPrice = wsgShopify.formatMoney(newPrice); //remove spans if needed

  newPrice = newPrice.replace("<span class=money>", "");
  newPrice = newPrice.replace("</span>", "");
  return newPrice;
} //move into header?


function hideElements() {
  if (typeof hideDomElements != "undefined") {
    hideDomElements.forEach(function (element) {
      (0, _wsgDiscounts.jQuery321)(element).hide();
      setTimeout(function () {
        (0, _wsgDiscounts.jQuery321)(element).hide();
      }, 1500);
    });
  }
}

module.exports = exports;

},{"../wsg-discounts.js":26}],15:[function(require,module,exports){
"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

// calculate and set lowest possible discount for each variant
// store in an object to be referenced later.
var discountCalculators = require('./discountCalculators');

exports.initDiscount = function (prodData, wsgData, collectionsList) {
  var lowestPrices = {}; //init object of variant prices with original prices - this is based on what Shopify sends us

  prodData.variants.forEach(function (variant) {
    lowestPrices[variant.id] = {
      wsgPrice: variant.price,
      origPrice: variant.price
    };
  }); //for each customer tag, run each discount to see if tags match

  wsgCustomerTags.forEach(function (tag) {
    wsgData.discounts.forEach(function (discount) {
      //if discount rule is valid for this customer, calculate prices of all variants according to rule
      //and overwrite lowestPrices.wsgPrice if its lower 
      if (tag == discount.tags) {
        if (discount.scope == "all") {
          //calc discount for all variants
          calcVariants(prodData.variants, discount, lowestPrices);
        } else if (discount.scope == 'collection') {
          //check if collection id matches current collection id
          collectionsList.forEach(function (shopCollection) {
            if (shopCollection.id == discount.collectionId) {
              //calc discount for all variants
              calcVariants(prodData.variants, discount, lowestPrices);
            }
          });
        } else if (discount.scope == 'product') {
          if (discount.product_id == prodData.id) {
            //ids match, calc discount
            //if there are variant rules: calc discount for appropriate variants in variants array
            if (_typeof(discount.variants) !== undefined && discount.variants.length > 0) {
              //for each discount.variants
              discount.variants.forEach(function (variantRule) {
                calcVariants(prodData.variants, variantRule, lowestPrices, variantRule.variant_id);
              });
            } else {
              //no variant rules to parse, calc all variants with product rule.
              calcVariants(prodData.variants, discount, lowestPrices);
            }
          }
        }
      }
    });
  });
  return lowestPrices;
};

function calcVariants(variants, discount, lowestPrices, variantId) {
  if (variantId) {
    //check to see if variant still exists in Shopify, otherwise there will be an undefined error
    //lowestPrices is based on Shopify's data, but the variantId is from wsgData
    if (typeof lowestPrices[variantId] != "undefined") {
      lowestPrices[variantId].wsgPrice = discountCalculators.calcDiscount(discount, lowestPrices[variantId].origPrice, lowestPrices[variantId].wsgPrice);
    }
  } else {
    variants.forEach(function (variant) {
      lowestPrices[variant.id].wsgPrice = discountCalculators.calcDiscount(discount, variant.price, lowestPrices[variant.id].wsgPrice);
    });
  }
}

module.exports = exports;

},{"./discountCalculators":14}],16:[function(require,module,exports){
"use strict";

var _wsgDiscounts = require("../../wsg-discounts.js");

//====  exclusions ====
//check for cart restrictions
exports.checkCartItems = function (customerType) {
  return new Promise(function (resolve, reject) {
    var restrictedItems = false; //check for any ws-only items in a retail cart

    _wsgDiscounts.jQuery321.ajax({
      url: "/a/wsg/proxy/cart-items",
      //get cart items' product json
      method: "GET"
    }).done(function (items) {
      if (customerType == "retail") {
        if (items.indexOf("wholesale-only") > -1) {
          restrictedItems = true;
        }
      }

      resolve(restrictedItems);
    }).fail(function (err) {
      console.log(err);
      resolve(false); //on error just resolve false to set cookie and move on
    });
  });
};

exports.checkRedirect = function (restrictedItems) {
  if (restrictedItems) {
    //     console.log("wholesale-only item in cart!");
    window.wsgRestrictedItems = true; //set global variable so we can disable ajax checkout btns if needed
    //redirect to restricted cart page

    var redirect = true;
    var noRedirectUrls = ["restricted", "account", "login", "signup", "/proxy"]; //we shouldn't redirect on certain urls

    for (var i = 0; i < noRedirectUrls.length; i++) {
      //check to see if it's ok to redirect
      if (window.location.href.indexOf(noRedirectUrls[i]) > -1) {
        redirect = false;
        break;
      }
    }

    if (redirect) {
      window.location.href = "/a/wsg/proxy/restricted-cart";
    } else {
      disableCheckout();
    }
  } else {
    //     console.log("no restricted items - setting cookie");
    sessionStorage.setItem("wsgCartChecked", true);
  }
};

function disableCheckout() {
  //   console.log("hiding checkout buttons")
  //set ajax checkout btns and /checkout links to display: none so user can't bypass checkout
  var checkoutStyle = "<style>\n   button[name='checkout'], input[name='checkout'], .wsgRedirectAjax, a[href*='checkout'], .shopify-payment-button";

  if (typeof wsgAjaxSettings != "undefined" && typeof wsgAjaxSettings.checkoutBtn != "undefined") {
    checkoutStyle += ", " + wsgAjaxSettings.checkoutBtn;
  }

  checkoutStyle += " {\n display: none !important;\n } \n</style>";
  (0, _wsgDiscounts.jQuery321)("body").append(checkoutStyle);
}

module.exports = exports;

},{"../../wsg-discounts.js":26}],17:[function(require,module,exports){
"use strict";

var _wsgDiscounts = require("../wsg-discounts.js");

//METHODS TO RUN TRANSLATIONS
//runs in browser
exports.run = function (data) {
  // console.log("Running Translations!")
  // console.log(data);
  // logs text object then runs through text subobjects and changes text accordingly
  _wsgDiscounts.jQuery321.each(data.text, function (k, v) {
    _wsgDiscounts.jQuery321.each(v, function (key, val) {
      jQuery("*[data-translation-selector=" + key + "]").text(val);
    });
  }); //runs through and changes placeholders accordingly


  _wsgDiscounts.jQuery321.each(data.placeholders, function (key, val) {
    jQuery("*[data-translation-selector=" + key + "]").attr("placeholder", val);
  }); //runs through and changes values accordingly


  _wsgDiscounts.jQuery321.each(data.valueAttrs, function (key, val) {
    jQuery("*[data-translation-selector=" + key + "]").val(val);
  }); //changes dynamic areas like min/max rules after timeout as they load a little slower


  setTimeout(function () {
    _wsgDiscounts.jQuery321.each(data.minimums, function (key, val) {
      jQuery("*[data-translation-selector=" + key + "]").text(val);
    });

    _wsgDiscounts.jQuery321.each(data.general, function (key, val) {
      jQuery("*[data-translation-selector=" + key + "]").text(val);
    });
  }, 2000);
  /**** style changes for longer text on translations ****/
  // Grabs current inline styles assigned by wsg-header and adds new rule to remove max-width

  var stylesCurrent = jQuery(".spof-btn").attr("style");

  if (stylesCurrent != undefined) {
    jQuery(".spof-btn").attr("style", stylesCurrent + " max-width: none !important");
  } else {
    jQuery(".spof-btn").attr("style", "max-width: none !important");
  }
};

module.exports = exports;

},{"../wsg-discounts.js":26}],18:[function(require,module,exports){
"use strict";

var _wsgDiscounts = require("../wsg-discounts.js");

//main cart functionality
var calcCart = require('../helpers/cart/calcDiscountsCart');

var shippingModal = require('../helpers/cart/shipping');

var checkout = require('../helpers/cart/checkout');

exports.run = function () {
  //======================================
  // Calculate all wsg rates on ajax cart
  //======================================
  //in a rush for this, DRY up when you get a chance by combining the three listeners
  (0, _wsgDiscounts.jQuery321)(".wsgAjaxLoad").on("click", function () {
    var wsgLineItems = [];

    _wsgDiscounts.jQuery321.getJSON("/cart.js", function (currentCart) {
      //load current cart
      wsgAjaxCart = currentCart; //calc duscounts

      wsgLineItems = calcCart.initCart(wsgAjaxCart, wsgLineItems);
      wsgLineItems = calcCart.calcCartPrices(wsgLineItems);
      wsgLineItems = calcCart.checkExclusions(wsgLineItems, true); //update DOM

      updateAjaxDOM(wsgLineItems);
    });
  });
  (0, _wsgDiscounts.jQuery321)(".wsgAjaxLoad").on("mouseenter", function () {
    var wsgLineItems = [];

    _wsgDiscounts.jQuery321.getJSON("/cart.js", function (currentCart) {
      //load current cart
      wsgAjaxCart = currentCart; //calc duscounts

      wsgLineItems = calcCart.initCart(wsgAjaxCart, wsgLineItems);
      wsgLineItems = calcCart.calcCartPrices(wsgLineItems);
      wsgLineItems = calcCart.checkExclusions(wsgLineItems, true); //update DOM

      updateAjaxDOM(wsgLineItems);
    });
  });
  (0, _wsgDiscounts.jQuery321)(".wsgAjaxLoad").on("wsgAjaxTrigger", function (e) {
    e.stopImmediatePropagation();
    var wsgLineItems = [];

    _wsgDiscounts.jQuery321.getJSON("/cart.js", function (currentCart) {
      //load current cart
      wsgAjaxCart = currentCart; //calc duscounts

      wsgLineItems = calcCart.initCart(wsgAjaxCart, wsgLineItems);
      wsgLineItems = calcCart.calcCartPrices(wsgLineItems);
      wsgLineItems = calcCart.checkExclusions(wsgLineItems, true); //update DOM

      updateAjaxDOM(wsgLineItems);
    });
  });
}; //check if ajax needs to be updated


exports.wsgCheckAjaxChange = function () {
  setTimeout(function () {
    if ((0, _wsgDiscounts.jQuery321)("#wsgAjaxChange").length == 0) {
      exports.updateWsgAjaxInternal();
    }

    setTimeout(function () {
      if ((0, _wsgDiscounts.jQuery321)("#wsgAjaxChange").length == 0) {
        exports.updateWsgAjaxInternal();
      }

      setTimeout(function () {
        if ((0, _wsgDiscounts.jQuery321)("#wsgAjaxChange").length == 0) {
          exports.updateWsgAjaxInternal();
        }
      }, 3000);
    }, 1250);
  }, 500);
}; //trigger listener if needed


exports.updateWsgAjaxInternal = function () {
  setTimeout(function () {
    (0, _wsgDiscounts.jQuery321)(".wsgAjaxLoad").trigger("wsgAjaxTrigger");
  }, 750);
};

function updateAjaxDOM(wsgLineItems) {
  if (typeof wsgMoneyFormat != 'undefined') {
    wsgShopify.money_format = wsgMoneyFormat;
  } //custom selectors take precedence over wsgAjax selectors


  var subtotal = 0;
  var priceSel = ".wsgAjaxPrice";
  var linePriceSel = ".wsgAjaxLinePrice";
  var totalSel = ".wsgAjaxSubtotal";
  var containerSel = false; //default to button

  var checkoutSel = "button[name='checkout']"; //if no button change to input

  if ((0, _wsgDiscounts.jQuery321)("button[name='checkout']").length == 0) {
    checkoutSel = "input[name='checkout']";
  } //if our class is there use that


  if ((0, _wsgDiscounts.jQuery321)(".wsgRedirectAjax").length > 0) {
    checkoutSel = ".wsgRedirectAjax";
  }

  if (typeof wsgAjaxSettings != "undefined") {
    //reassign variables if custom selectors exist
    if (wsgAjaxSettings.price) {
      priceSel = wsgAjaxSettings.price;
    }

    if (wsgAjaxSettings.linePrice) {
      linePriceSel = wsgAjaxSettings.linePrice;
    }

    if (wsgAjaxSettings.subtotal) {
      totalSel = wsgAjaxSettings.subtotal;
    }

    if (wsgAjaxSettings.checkoutBtn) {
      checkoutSel = wsgAjaxSettings.checkoutBtn;
    }

    if (wsgAjaxSettings.container) {
      containerSel = wsgAjaxSettings.container;
    }
  } //cycle through line items, match to jquery selection of ajax price


  (0, _wsgDiscounts.jQuery321)(priceSel).each(function (index) {
    if (index >= wsgLineItems.length) {
      if (typeof wsgMultiAjax == "undefined" || wsgMultiAjax == false) {
        return false;
      } //for themes with an extra hidden drawer need to remap index


      index = index - wsgLineItems.length;
    }

    (0, _wsgDiscounts.jQuery321)(this).text(wsgShopify.formatMoney(wsgLineItems[index].wsgPrice));
  });
  (0, _wsgDiscounts.jQuery321)(linePriceSel).each(function (index) {
    if (index >= wsgLineItems.length) {
      if (typeof wsgMultiAjax == "undefined" || wsgMultiAjax == false) {
        return false;
      }

      index = index - wsgLineItems.length;
    }

    (0, _wsgDiscounts.jQuery321)(this).text(wsgShopify.formatMoney(wsgLineItems[index].wsgLinePrice));
  });
  wsgLineItems.forEach(function (lineItem) {
    subtotal += lineItem.wsgLinePrice;
  });
  (0, _wsgDiscounts.jQuery321)(totalSel).text(wsgShopify.formatMoney(subtotal)); //add hidden span to subtotal to detect changes

  (0, _wsgDiscounts.jQuery321)(totalSel).prepend("<span id='wsgAjaxChange' style='display:none;'></span>"); //change /checkout to /cart or make button go to cart

  (0, _wsgDiscounts.jQuery321)(checkoutSel).on("click", function (e) {
    (0, _wsgDiscounts.jQuery321)(this).off();
    e.preventDefault();
    setTimeout(function () {
      window.location.href = "/cart";
    }, 500);
  });
  (0, _wsgDiscounts.jQuery321)(".hideWsg").hide();

  if (typeof hideDomElements != "undefined") {
    hideDomElements.push(".shopify-payment-button"); //hide all addl payment btns

    hideDomElements.forEach(function (element) {
      (0, _wsgDiscounts.jQuery321)(element).hide();
      setTimeout(function () {
        (0, _wsgDiscounts.jQuery321)(element).hide();
      }, 1500);
    });
  }
}

module.exports = exports;

},{"../helpers/cart/calcDiscountsCart":10,"../helpers/cart/checkout":11,"../helpers/cart/shipping":13,"../wsg-discounts.js":26}],19:[function(require,module,exports){
"use strict";

var _wsgDiscounts = require("../wsg-discounts.js");

//main cart functionality
var calcCart = require('../helpers/cart/calcDiscountsCart');

var shippingModal = require('../helpers/cart/shipping');

var checkout = require('../helpers/cart/checkout');

var wsgCartProxy = false;

exports.run = function () {
  //are we on teh cart proxy?
  if (window.location.href.indexOf("a/wsg/proxy/ws-cart") > -1) {
    wsgCartProxy = true;
    checkCurrency();
  } //======================================
  // Calculate all wsg rates on cart obj
  //======================================


  var containsBackorder = false; //create copy of cart and calculate wsg rates

  var wsgLineItems = [];
  wsgLineItems = calcCart.initCart(wsgCart, wsgLineItems);
  wsgLineItems = calcCart.calcCartPrices(wsgLineItems);
  wsgLineItems = calcCart.checkExclusions(wsgLineItems); //show quickorder form link

  (0, _wsgDiscounts.jQuery321)('#wsg-spof-link').html("<a href='/a/wsg/proxy/single-page-order'>View Quick Order Form</a>"); //if needed put empty cart spof-btn style script here (might need to be in window.on(load)?)
  //check to see if subtotal is below minumum

  var subtotal = updateCartDOM(wsgLineItems); //DEPRECIATED always returns true now

  var wsgOn = true;
  containsBackorder = calcCart.checkInventory(wsgLineItems); //turn off spof link if necessary ==>  depreciated?

  if (wsgData.single_page.linkInCart == false) {
    (0, _wsgDiscounts.jQuery321)('#wsg-spof-link').hide();
  } //-----------------------  
  //ws-cart proxy listeners
  //-----------------------
  // hide shipping and show main on Return to Summary click


  (0, _wsgDiscounts.jQuery321)(".wsg-return-to-summary").click(function () {
    (0, _wsgDiscounts.jQuery321)("#wsg-cart-main").slideDown();
    (0, _wsgDiscounts.jQuery321)("#wsg-cart-shipping").slideUp();
  }); //enable/disable checkout button on terms confirm
  //     $("#wsg-terms-checkbox").click(function () {
  //       if (this.checked) {
  //         $('#wsg-checkout-two').removeAttr("disabled");
  //       } else {
  //         $('#wsg-checkout-two').attr('disabled', 'disabled');
  //       }
  //     })
  //check for changes to item quantities

  (0, _wsgDiscounts.jQuery321)(".wsg-cart__qty-container input").on("change", function () {
    checkQtyChange((0, _wsgDiscounts.jQuery321)(this));
  });
  (0, _wsgDiscounts.jQuery321)(".wsg-cart__qty-container span").on("click", function () {
    checkQtyChange((0, _wsgDiscounts.jQuery321)(this).siblings("input"));
  }); //prevent accidental early form submit.  allow enter on button and textarea

  (0, _wsgDiscounts.jQuery321)(window).keydown(function (event) {
    if (event.keyCode == 13 && !(0, _wsgDiscounts.jQuery321)("button").is(":focus")) {
      if (!(0, _wsgDiscounts.jQuery321)(".wsg-note").is(":focus")) {
        event.preventDefault();
        return false;
      }
    }
  });

  function checkQtyChange(currentNode) {
    var variantId;
    var updatesData = {
      updates: {}
    };

    if ((0, _wsgDiscounts.jQuery321)(currentNode).val() >= 0 || (0, _wsgDiscounts.jQuery321)(currentNode).data('updated')) {
      //get variant
      variantId = (0, _wsgDiscounts.jQuery321)(currentNode).attr('id').slice(8);
      updatesData.updates[variantId] = parseInt((0, _wsgDiscounts.jQuery321)(currentNode).val());
    } //post update


    _wsgDiscounts.jQuery321.ajax({
      method: 'POST',
      url: '/cart/update.js',
      data: updatesData,
      dataType: 'json'
    }).done(function (cart, textStatus, jqXHR) {
      //           console.log("The cart from post: " +  JSON.stringify(cart.items))
      // update wsgCart object if qty doesn't match
      if (wsgCart.item_count != cart.item_count) {
        wsgCart.item_count = cart.item_count;

        for (var i = 0; i < wsgCart.items.length; i++) {
          if (wsgCart.items[i].key === variantId) {
            wsgCart.items[i].quantity = updatesData.updates[variantId];
          }
        } //calling our getScript here works to update prices without reload, but it also adds a second Order requirements not met


        location.reload();
      }
    }).fail(function (err) {
      console.log(err);
    });
  } //===============================================
  //          Checkout Event Listener
  //===============================================
  //if needed you can try putting the disable/enable event here for page load checkout button
  //legacy shops


  if ((0, _wsgDiscounts.jQuery321)(".wsg-checkout-main").length > 0) {
    (0, _wsgDiscounts.jQuery321)(".wsg-checkout-main").click(function () {
      //disable form submit and run custom checkout           
      (0, _wsgDiscounts.jQuery321)("form").on('submit', function (e) {
        e.preventDefault(e);
        (0, _wsgDiscounts.jQuery321)(this).off();
      });
      submitForm();
    });
  } else {
    (0, _wsgDiscounts.jQuery321)("[name='checkout']").on("click", function () {
      //disable form submit and run custom checkout           
      (0, _wsgDiscounts.jQuery321)("form").on('submit', function (e) {
        e.preventDefault(e);
        (0, _wsgDiscounts.jQuery321)(this).off();
      });
      submitForm();
    });
  } //for stubborn checkout buttons with other listeners


  if ((0, _wsgDiscounts.jQuery321)(".wsgForceCheckout").length > 0) {
    (0, _wsgDiscounts.jQuery321)(".wsgForceCheckout").off();
    setTimeout(function () {
      (0, _wsgDiscounts.jQuery321)(".wsgForceCheckout").off();
      (0, _wsgDiscounts.jQuery321)(".wsgForceCheckout").on("click", function (event) {
        event.stopImmediatePropagation();
        event.preventDefault(); //disable form submit and run custom checkout           

        (0, _wsgDiscounts.jQuery321)("form").on('submit', function (e) {
          e.preventDefault(e);
          (0, _wsgDiscounts.jQuery321)(this).off();
        });
        submitForm();
      });
    }, 1000);
    setTimeout(function () {
      (0, _wsgDiscounts.jQuery321)(".wsgForceCheckout").off();
      (0, _wsgDiscounts.jQuery321)(".wsgForceCheckout").on("click", function (event) {
        event.stopImmediatePropagation();
        event.preventDefault(); //disable form submit and run custom checkout           

        (0, _wsgDiscounts.jQuery321)("form").on('submit', function (e) {
          e.preventDefault(e);
          (0, _wsgDiscounts.jQuery321)(this).off();
        });
        submitForm();
      });
    }, 2500);
  } //cart proxy checkout button
  //enable button now that it's loaded


  (0, _wsgDiscounts.jQuery321)("#wsg-checkout-one").show();
  (0, _wsgDiscounts.jQuery321)("#wsg-checkout-one").on("click", function () {
    event.stopPropagation();
    event.preventDefault(); //init shipping section

    (0, _wsgDiscounts.jQuery321)("#wsg-cart-main").slideUp();
    (0, _wsgDiscounts.jQuery321)("#wsg-cart-shipping").slideDown();
    submitForm();
  });
  (0, _wsgDiscounts.jQuery321)(".checkout-one-spof").show(); //fix accidental form submit on SPOF click

  (0, _wsgDiscounts.jQuery321)(".wsg-checkout-buttons .spof-btn").on("click", function (e) {
    e.preventDefault();
    window.location.href = "/a/wsg/proxy/single-page-order";
  });

  function submitForm() {
    if (wsgOn) {
      //confirm shipping address to calculate proper shipping rate and send to checkout
      shippingModal.initShippingModal(function (shippingAddress) {
        checkout.checkout(shippingAddress, wsgLineItems, containsBackorder, subtotal);
      });
    } else {
      //no wsg discounts, checkout normally <== depreciated
      (0, _wsgDiscounts.jQuery321)('form').submit();
    }
  } //============================
  //Backordered Modal Listeners
  //============================


  (0, _wsgDiscounts.jQuery321)('#wsg-view-items').on('click', function () {
    (0, _wsgDiscounts.jQuery321)('#wsg-backordered-modal').toggleClass('display-backordered');
  });
  (0, _wsgDiscounts.jQuery321)('#close-backorder').on('click', function () {
    (0, _wsgDiscounts.jQuery321)('#wsg-backordered-modal').toggleClass('display-backordered');
  });

  window.onclick = function (event) {
    var backorderModal = document.getElementById('wsg-backordered-modal');

    if (event.target == backorderModal) {
      (0, _wsgDiscounts.jQuery321)('#wsg-backordered-modal').toggleClass('display-backordered');
    }
  }; //Check Order Requirements


  if (wsgCart.item_count > 0) {
    var quantityErrors = calcCart.checkQuantity(wsgLineItems, subtotal);

    if (quantityErrors.length > 0) {
      (0, _wsgDiscounts.jQuery321)('.wsg-checkout-main').attr('disabled', 'true');
      (0, _wsgDiscounts.jQuery321)("[name='checkout']").attr('disabled', 'true'); //update DOM
      //warning styles

      (0, _wsgDiscounts.jQuery321)("head").append("<style>.wsg-footer-msg{ text-align:left; color: #e80017; } .wsg-qty-list{ text-align:left; padding-bottom: 8px; margin-bottom: 12px; border-bottom: thin solid #d1d1d1; margin-left: 10px; } .wsg-qty-header{ color: #e80017; font-size: 1.2em; margin: 0 auto; text-align: center; margin-bottom: 14px;}</style>"); //HEADER message

      var headerMsg = "<p class='wsg-qty-header'><strong>Order requirements not met.</strong><br>See below for details.</p>";
      (0, _wsgDiscounts.jQuery321)("#wsg-spof-link").after(headerMsg); //for ws-cart proxy routes

      (0, _wsgDiscounts.jQuery321)(".wsg-requirements-top-container").show();
      (0, _wsgDiscounts.jQuery321)('#wsg-checkout-one').attr('disabled', 'true'); //FOOTER message
      //header

      var footerMsg = "<p class='wsg-footer-msg'><strong><span style='font-size:1.1em;'  data-translation-selector='requirementsNotMet'>Order requirements not met.</span></strong></p><div class='wsg-qty-list'><ul>"; //add list of errors

      for (var i = 0; i < quantityErrors.length; i++) {
        footerMsg += "<li>" + quantityErrors[i] + "</li>";
      }

      footerMsg += "</ul></div>";
      (0, _wsgDiscounts.jQuery321)(footerMsg).insertBefore(".wsg-ship-partial"); //hide long list of errors

      if (quantityErrors.length > 5) {
        (0, _wsgDiscounts.jQuery321)(".wsg-qty-list li").slice(5).hide();
        (0, _wsgDiscounts.jQuery321)(".wsg-qty-list").append("<p><a id='wsg-show-qty' href='#' data-translation-selector='seeAll'>See all</a></p>");
        (0, _wsgDiscounts.jQuery321)("#wsg-show-qty").on("click", function (e) {
          e.preventDefault();
          (0, _wsgDiscounts.jQuery321)(".wsg-qty-list li").slice(3).slideDown();
          (0, _wsgDiscounts.jQuery321)(this).hide();
        });
      }
    }
  }
};

function checkCurrency() {
  //wsgCurrency is set in ws-cart proxy, so only run for new shops
  //wsgCurrency is {{ shop.currency }} so if the cart currency (local presentment currency) doesn't match, update cart to match
  if (wsgCurrency && wsgCurrency != wsgCart.currency) {
    //update cart with new currency, alert, reload page
    _wsgDiscounts.jQuery321.post("/cart/update.js", {
      "currency": wsgCurrency
    }).done(function (currencyCart) {
      var currencyMsg = "Wholesale checkouts can only be processed in " + wsgCurrency;
      currencyMsg += ".  The cart will reload with updated prices.";
      alert(currencyMsg);
      window.location.reload(true);
    }).fail(function (err) {
      console.log(err);
    });
  }
}

function updateCartDOM(wsgLineItems) {
  if (typeof wsgMoneyFormat != 'undefined') {
    wsgShopify.money_format = wsgMoneyFormat;
  }

  var subtotal = 0;
  wsgLineItems.forEach(function (lineItem) {
    var itemPriceSelector = ".wsg-item-price_" + lineItem.lineItemId;
    var linePriceSelector = ".wsg-line-price_" + lineItem.lineItemId; //update item price

    (0, _wsgDiscounts.jQuery321)(itemPriceSelector).text(wsgShopify.formatMoney(lineItem.wsgPrice)); //update line item total price               

    (0, _wsgDiscounts.jQuery321)(linePriceSelector).text(wsgShopify.formatMoney(lineItem.wsgLinePrice));
    subtotal += lineItem.wsgLinePrice;
  });
  (0, _wsgDiscounts.jQuery321)(".wsg-cart-subtotal").text(wsgShopify.formatMoney(subtotal)); //for theme default carts that use ajx for updates instead of reload, add mutation observer

  if (typeof wsgCartObserver != "undefined") {
    if (wsgCartObserver) {
      (0, _wsgDiscounts.jQuery321)(window).ready(function () {
        setTimeout(function () {
          var mutCallback = function mutCallback() {
            setTimeout(function () {
              //if cart item counts differ reload page
              _wsgDiscounts.jQuery321.getJSON("/cart.js", function (currentCart) {
                if (wsgCart.item_count != currentCart.item_count) {
                  setTimeout(function () {
                    window.location.reload(true);
                  }, 100);
                }
              });
            }, 1000);
          };

          var wsgObserver = new MutationObserver(mutCallback);
          wsgObserver.observe(document.body, {
            childList: true,
            subtree: true
          });
        }, 1000);
      });
    }
  }

  return subtotal;
}

module.exports = exports;

},{"../helpers/cart/calcDiscountsCart":10,"../helpers/cart/checkout":11,"../helpers/cart/shipping":13,"../wsg-discounts.js":26}],20:[function(require,module,exports){
"use strict";

var _wsgDiscounts = require("../wsg-discounts.js");

var discountCalculators = require('../helpers/discountCalculators');

var init = require('../helpers/initDiscounts');

exports.run = function () {
  if (wsgCustomerTags && wsgData) {
    //changes to true when the collection data is found to avoid running unnecessary loops
    var foundData = false; //this was an attempt to fix some things, a few shops are still using this but otherwise depreciated in 03/19

    if (typeof wsgColItems != "undefined") {
      if (wsgColItems.length > 0) {
        foundData = true;
        wsgColItems.forEach(function (item) {
          var prodData = item.prodData;
          var collectionData = item.collectionData; //init discounts, store orig and wsg prices in obj.

          var calculatedPrices = init.initDiscount(prodData, wsgData, collectionData); //update DOM

          discountCalculators.updatePriceDOM(calculatedPrices, prodData.id);
        });
      }
    } //newer shops with jQuery selectors


    if ((0, _wsgDiscounts.jQuery321)(".wsg-collection-item").length == 0 && foundData == false) {
      foundData = true; //get all comment nodes with collection data

      var colDataNodes = (0, _wsgDiscounts.jQuery321)("*").contents().filter(function () {
        return this.nodeType == 8 && this.nodeValue.indexOf('wsgDataStart') != -1;
      }); //cucle through each product, calc price, update DOM

      for (var i = 0; i < colDataNodes.length; i++) {
        //get product data
        var currentProd = discountCalculators.getProductData(colDataNodes[i]); //calc potential ws prices and update DOM

        if (currentProd) {
          var calculatedPrices = init.initDiscount(currentProd.prodData, wsgData, currentProd.collectionData);
          discountCalculators.updateCollectionDOM({
            prodId: currentProd.prodData.id,
            calculatedPrices: calculatedPrices,
            domNode: colDataNodes[i],
            index: i
          }); //if ajax is enabled then save data for use by ajax cart later

          if (typeof wsgAjaxCol != "undefined") {
            wsgAjaxCol[currentProd.prodData.id] = {
              collectionsList: currentProd.collectionData,
              productTags: currentProd.prodData.tags
            };
          }
        } else {
          console.log("Collection item data not found, make sure wsgTempProd is assigned correctly in for loop");
        }
      }
    } //legacy shops    


    if ((0, _wsgDiscounts.jQuery321)(".wsg-collection-item").length > 0 && foundData == false) {
      foundData = true;
      (0, _wsgDiscounts.jQuery321)('.wsg-collection-item').each(function (i, val) {
        var prodData = JSON.parse((0, _wsgDiscounts.jQuery321)(this, 'span:first-child').text());
        var collectionData = JSON.parse((0, _wsgDiscounts.jQuery321)(val).next().text()); //init discounts, store orig and wsg prices in obj.

        var calculatedPrices = init.initDiscount(prodData, wsgData, collectionData); //update DOM

        discountCalculators.updatePriceDOM(calculatedPrices, prodData.id);
      });
    } //listen for ajax collection changes


    if (typeof wsgCollectionObserver != "undefined") {
      //sometimes wsgRunCollection = true but there are no products on the page 
      //in these cases you don't want to run the observer as it will throw a render blocking error.
      var setObserver = true;

      if (wsgCollectionObserver == true) {
        //save current url
        var origUrl = window.location.href; //add hidden span to first element to detect when prices are overwritten
        //newer shops that use jQuery selector already have hidden span added

        var firstSel;

        if ((0, _wsgDiscounts.jQuery321)("#wsgCollectionChange").length == 0) {
          //some shops used the array wsgColItems to hold col item data but that is now depreciated, only a few do this at this point (installed Feb/March of 19)
          if (typeof wsgColItems != "undefined" && wsgColItems[0]) {
            firstSel = ".wsg-price-" + wsgColItems[0].id;
          } else {
            //legacy shops
            var firstId = (0, _wsgDiscounts.jQuery321)(".wsg-collection-item:first").prop("id") || null;

            if (firstId) {
              firstId = firstId.substring(12);
              firstSel = ".wsg-price-" + firstId;
            } else {
              //if we get here there is no product on the page, so don't set observer
              setObserver = false;
            }
          }

          if (setObserver) {
            (0, _wsgDiscounts.jQuery321)(firstSel).append("<span id='wsgCollectionChange' style='display:none;'></span>");
          }
        } //listen for DOM mutations, reload page if url has changed: need to DRY up


        if (setObserver) {
          var colMutCallback = function colMutCallback() {
            setTimeout(function () {
              if ((0, _wsgDiscounts.jQuery321)("#wsgCollectionChange").length == 0) {
                if (origUrl != window.location.href) {
                  window.location.reload(true);
                } else {
                  setTimeout(function () {
                    if (origUrl != window.location.href) {
                      window.location.reload(true);
                    } else {
                      setTimeout(function () {
                        if (origUrl != window.location.href) {
                          window.location.reload(true);
                        }
                      }, 1500);
                    }
                  }, 1000);
                }
              } else {
                setTimeout(function () {
                  if ((0, _wsgDiscounts.jQuery321)("#wsgCollectionChange").length == 0) {
                    if (origUrl != window.location.href) {
                      window.location.reload(true);
                    } else {
                      setTimeout(function () {
                        if (origUrl != window.location.href) {
                          window.location.reload(true);
                        }
                      }, 1000);
                    }
                  }
                }, 1500);
              }
            }, 500);
          };

          var wsgColObserver = new MutationObserver(colMutCallback);
          wsgColObserver.observe(document.body, {
            childList: true,
            subtree: true
          });
        }
      }
    } //==================================
    //     FILTER APP TEST
    //==================================
    //too many problems with filter apps, one shop might be using this but otherwise needs some love
    //listen for changes when running a product filter/search app


    if (typeof wsgFilterAppListener != "undefined") {
      if (wsgFilterAppListener == true) {
        //add hidden span to first element to detect when prices are overwritten
        addFilterAppSpan(); //listen for DOM mutations, update DOM if our hidden span is gone
        //callback on mutation

        var filterAppMutCallback = function filterAppMutCallback() {
          setTimeout(function () {
            if ((0, _wsgDiscounts.jQuery321)("#wsgFilterAppListener").length == 0) {
              //update prices
              updatePricesAjax(); //add hidden span again

              addFilterAppSpan();
            }
          }, 1000);
        }; //listen for mutations


        var wsgFilterAppObserver = new MutationObserver(filterAppMutCallback);
        wsgFilterAppObserver.observe(document.body, {
          childList: true,
          subtree: true
        });
      }
    }

    if (foundData == false) {
      console.log("collection item data not found");
    }
  }
};

function addFilterAppSpan() {
  //add hidden span to first visible product in collection
  var collectionNodes = (0, _wsgDiscounts.jQuery321)(".wsg-collection-item");
  collectionNodes.each(function (index) {
    var colItemId = (0, _wsgDiscounts.jQuery321)(this).prop("id");
    colItemId = colItemId.substring(12);
    var priceSel = ".wsg-price-" + colItemId;

    if ((0, _wsgDiscounts.jQuery321)(priceSel).length > 0) {
      (0, _wsgDiscounts.jQuery321)(priceSel).append("<span id='wsgFilterAppListener' style='display:none;'></span>");
      return false;
    }
  });
} //update prices without a page reload - must use legacy setup


function updatePricesAjax() {
  (0, _wsgDiscounts.jQuery321)('.wsg-collection-item').each(function (i, val) {
    var prodData = JSON.parse((0, _wsgDiscounts.jQuery321)(this, 'span:first-child').text());
    var collectionData = JSON.parse((0, _wsgDiscounts.jQuery321)(val).next().text()); //init discounts, store orig and wsg prices in obj.

    var calculatedPrices = init.initDiscount(prodData, wsgData, collectionData); //update DOM

    discountCalculators.updatePriceDOM(calculatedPrices, prodData.id);
  });
}

module.exports = exports;

},{"../helpers/discountCalculators":14,"../helpers/initDiscounts":15,"../wsg-discounts.js":26}],21:[function(require,module,exports){
"use strict";

var _wsgDiscounts = require("../wsg-discounts.js");

var discountCalculators = require('../helpers/discountCalculators');

var init = require('../helpers/initDiscounts');

exports.run = function () {
  var excluded = false; //check for exclusions 

  wsgData.shop_preferences.exclusions.forEach(function (exclusionTag) {
    if (wsgProdData.tags.indexOf(exclusionTag) !== -1) {
      excluded = true;
    }
  }); //run if no exclusions

  if (wsgCustomerTags && wsgData && !excluded) {
    var checkVariantChange = function checkVariantChange() {
      setTimeout(function () {
        var newVariant = getwsgCurrentVariant();

        if (newVariant != wsgCurrentVariant) {
          wsgCurrentVariant = newVariant;
          discountCalculators.updatePriceDOM(calculatedPrices, wsgProdData.id, wsgCurrentVariant);
          addBackorderMsg(wsgCurrentVariant);
        } else {
          //for slow changes
          setTimeout(function () {
            newVariant = getwsgCurrentVariant();

            if (newVariant != wsgCurrentVariant) {
              wsgCurrentVariant = newVariant;
              discountCalculators.updatePriceDOM(calculatedPrices, wsgProdData.id, wsgCurrentVariant);
              addBackorderMsg(wsgCurrentVariant);
            }
          }, 1000);
        }
      }, 300);
    }; //used for non-select inputs


    //==================================== 
    //     get variant id from url  
    //====================================
    var getwsgCurrentVariant = function getwsgCurrentVariant() {
      if ((0, _wsgDiscounts.jQuery321)("[name='id']").length > 0 && (0, _wsgDiscounts.jQuery321)("#wsgForceQuerystring").length == 0) {
        return (0, _wsgDiscounts.jQuery321)("[name='id']").val();
      } else {
        //extract current from url querystring
        var url = window.location.href;
        var begQuery = url.indexOf("?variant="); //if there is no querystring return the originally selected variant

        if (begQuery > 0) {
          //set variant id to querystring
          var variantId = url.substr(begQuery + 9); //check to see if there are any other querystrings and remove them

          var checkId = variantId.indexOf("?");

          if (checkId > 0) {
            //********** NEED TO CHECK IF THIS WORKS ********
            variantId = variantId.substring(0, checkId);
          } //  console.log('variantId' + variantId)


          return variantId;
        } //   console.log('wsgCurrentVariant' + wsgCurrentVariant)


        return wsgCurrentVariant;
      }
    }; //ADD backorder message


    var addBackorderMsg = function addBackorderMsg(variantId) {
      if ((0, _wsgDiscounts.jQuery321)("#wsgStockData").length > 0) {
        if (typeof variantId !== 'undefined') {
          if (wsgStockData[variantId].stock < 1 && wsgStockData[variantId].policy == 'continue' && wsgData.shop_preferences.autoBackorder) {
            //show backordered message
            (0, _wsgDiscounts.jQuery321)('#wsg-backordered-msg').css('visibility', 'visible');

            if (wsgStockData[variantId].shipDate !== '') {
              (0, _wsgDiscounts.jQuery321)('#wsg-backordered-msg').text('Backordered - Ships ' + wsgStockData[variantId].shipDate);
            } else {
              (0, _wsgDiscounts.jQuery321)('#wsg-backordered-msg').text('Backordered');
            }

            (0, _wsgDiscounts.jQuery321)('#wsg-backordered-msg').css('margin-bottom', "1.0em");
            (0, _wsgDiscounts.jQuery321)('#wsg-backordered-msg').css('font-style', 'italic');
          } else {
            //hide backorder message
            (0, _wsgDiscounts.jQuery321)('#wsg-backordered-msg').css('visibility', 'hidden');
          }
        }
      }
    };

    //init discounts, store orig and wsg prices in obj.   
    var calculatedPrices = init.initDiscount(wsgProdData, wsgData, wsgCollectionsList); //get price of current variant and update DOM

    discountCalculators.updatePriceDOM(calculatedPrices, wsgProdData.id, wsgCurrentVariant); //add backordered message

    if ((0, _wsgDiscounts.jQuery321)("#wsgStockData").length > 0) {
      wsgStockData = wsgStockData.slice(0, -1); //remove trailing comma

      wsgStockData = '{' + wsgStockData + '}';
      wsgStockData = JSON.parse(wsgStockData);
      addBackorderMsg(wsgCurrentVariant);
    } //======================================  
    //          EVENT LISTENERS
    //======================================
    //event listener for variant selector


    (0, _wsgDiscounts.jQuery321)('select').change(function () {
      //so at some point in testing there was some sort of delay in the # of the url getting updated on change
      //so we have a backup here that fires if the variant hasn't changed and waits a half second to check the url again
      var newVariant = getwsgCurrentVariant();

      if (newVariant !== wsgCurrentVariant) {
        // console.log("changed 1")
        //update
        //some selects dont hold a value for sold out variants, so do nothing if that's the case
        wsgCurrentVariant = newVariant;

        if (wsgCurrentVariant) {
          discountCalculators.updatePriceDOM(calculatedPrices, wsgProdData.id, wsgCurrentVariant);
          addBackorderMsg(wsgCurrentVariant);
        }
      } else {
        //wait 700 ms and check again
        setTimeout(function () {
          newVariant = getwsgCurrentVariant();

          if (newVariant !== wsgCurrentVariant) {
            //update
            wsgCurrentVariant = newVariant;

            if (wsgCurrentVariant) {
              discountCalculators.updatePriceDOM(calculatedPrices, wsgProdData.id, wsgCurrentVariant);
              addBackorderMsg(wsgCurrentVariant);
            }
          }
        }, 700);
      }
    }); //click and keyup listener for swatches

    (0, _wsgDiscounts.jQuery321)(window).on("mouseup", function () {
      checkVariantChange();
    });
    (0, _wsgDiscounts.jQuery321)(window).on("keyup", function () {
      checkVariantChange();
    });
    (0, _wsgDiscounts.jQuery321)('.wsg-option-click').on('click', function () {
      setTimeout(function () {
        wsgCurrentVariant = getwsgCurrentVariant();
        discountCalculators.updatePriceDOM(calculatedPrices, wsgProdData.id, wsgCurrentVariant);
        addBackorderMsg(wsgCurrentVariant);
      }, 750);
    }); //swatches and stubborn selects - set wsgSwatch in wsg-header.liquid

    if (typeof wsgSwatch !== "undefined") {
      if (wsgSwatch.length > 0) {
        (0, _wsgDiscounts.jQuery321)(wsgSwatch).on("click", function () {
          setTimeout(function () {
            wsgCurrentVariant = getwsgCurrentVariant();
            discountCalculators.updatePriceDOM(calculatedPrices, wsgProdData.id, wsgCurrentVariant);
            addBackorderMsg(wsgCurrentVariant);
          }, 400);
        });
      }
    } //a listener on the select object that takes the value.  Runs 150ms after select listener
    //**not sure what this does really, or if its on any shops (noted on 01/22/19)


    (0, _wsgDiscounts.jQuery321)(".wsg-variant-val").on("click", function () {
      setTimeout(function () {
        wsgCurrentVariant = (0, _wsgDiscounts.jQuery321)(".wsg-variant-val").val();
        discountCalculators.updatePriceDOM(calculatedPrices, wsgProdData.id, wsgCurrentVariant);
        addBackorderMsg(wsgCurrentVariant);
      }, 850);
    });
  }
};

module.exports = exports;

},{"../helpers/discountCalculators":14,"../helpers/initDiscounts":15,"../wsg-discounts.js":26}],22:[function(require,module,exports){
"use strict";

var _wsgDiscounts = require("../wsg-discounts.js");

//METHODS TO RUN ON PROXY PAGES
//runs in browser
var calcCart = require('../helpers/cart/calcDiscountsCart');

exports.run = function () {
  //run this for a manual admin order page
  if (typeof wsgManual !== 'undefined') {
    if (wsgManual == 'build') {
      runBuildPage();
    } else if (wsgManual == 'submit') {
      runSubmitPage();
    }
  } else {
    //update buttons and margins
    updateProxyStyles();
    updateDom();
  }
}; //=========================
// METHODS FOR MANUAL ORDER
//=========================
//ADD TO CART - draftOrder.ejs


function runBuildPage() {
  //build order and submit
  var cart = buildCart();
  var addTaxes = false; // if (wsgShopCountry == wsgCustomerCountry && wsgData.shop_preferences.taxRate > 0){
  //   addTaxes = true;
  // }

  if (wsgData.shop_preferences.taxRate > 0) {
    if (wsgShopCountry == wsgCustomerCountry || wsgShopCountryCode == wsgCustomerCountryCode) {
      addTaxes = true;
    }
  } //clear cart


  _wsgDiscounts.jQuery321.ajax({
    mthod: 'POST',
    url: '/cart/clear.js',
    dataType: 'json'
  }).done(function (data, textStatus, jqXHR) {
    //add new line items
    _wsgDiscounts.jQuery321.ajax({
      method: 'POST',
      url: '/cart/update.js',
      data: cart,
      dataType: 'json'
    }).done(function (data, textStatus, jqXHR) {
      //redirect to page with liquid to build draft update object
      var redirectUrl = '/a/wsg/proxy/draft-order/submit?taxes=' + addTaxes + '&proxyMargin=' + proxyMargin;
      window.location.href = redirectUrl;
    }).fail(function (err) {
      console.log(err);
      alert("Error: " + err.responseJSON.description);
      finishUpdate('/admin/draft_orders/' + cart.attributes.id);
    });
  }).fail(function (err) {
    console.log(err);
  });
} //create line items for cart update


function buildCart() {
  var cartUpdate = {
    updates: {},
    attributes: {
      tags: customerTags,
      id: order.draft_order.id
    },
    currency: wsgShopCurrency
  };
  order.draft_order.line_items.forEach(function (lineItem) {
    cartUpdate.updates[lineItem.variant_id] = lineItem.quantity;
  });
  return cartUpdate;
} //CREATE AND UPDATE DRAFT  draftOrder-submit.ejs


function runSubmitPage() {
  var processingAlertText; // if translations are running/not set to English, grab only the alert text needed for this page

  if (wsgData.translations.language != 'english') {
    var processingAlert = require('../../helpers/translations/translationFiles/').files[wsgData.translations.language].alertErrorProcessingDraft;

    processingAlertText = processingAlert;
  } else {
    processingAlertText = "We're sorry, there was an error processing your draft order.  Please try again.  If the problem persists please let us know.";
  }

  wsgCustomerTags = wsgCart.attributes.tags.split(', ');
  var wsgLineItems = []; //calc wsg prices

  wsgLineItems = calcCart.initCart(wsgCart, wsgLineItems);
  wsgLineItems = calcCart.calcCartPrices(wsgLineItems);
  wsgLineItems = calcCart.checkExclusions(wsgLineItems); //build and submit draft order update
  //on success, clear cart and redirect to original page

  var orderReq = buildUpdateReq(wsgLineItems); //add tags

  orderReq.draft_order.tags = wsgCart.attributes.tags + ", wholesale";
  var updateUrl = '/a/wsg/proxy/draft-order/update-draft?shop=' + myshopifyDomain;
  var orderUrl = '/admin/draft_orders/' + orderReq.draft_order.id;

  _wsgDiscounts.jQuery321.ajax({
    method: 'PUT',
    url: updateUrl,
    data: orderReq
  }).done(function (response, textStatus, jqXHR) {
    finishUpdate(orderUrl);
  }).fail(function (err) {
    console.log(err);
    alert(processingAlertText);
    finishUpdate(orderUrl);
  });
} //add discounts and format update request for shopify


function buildUpdateReq(wsgLineItems) {
  var orderReq = {
    'draft_order': {
      'id': wsgCart.attributes.id,
      'line_items': [] // "tags": "wholesale"

    }
  };
  var taxSubtotal = 0; //go through each item in the cart and add to draftOrder line_items

  wsgLineItems.forEach(function (item) {
    //calculate discount of item
    var appliedDiscount = calcWSGPrice(item.price, item.wsgPrice, item.quantity);
    var tempLineItem = {
      "price": item.price,
      "product_id": item.productId,
      "quantity": item.quantity,
      "variant_id": item.variantId,
      "applied_discount": appliedDiscount
    };

    if (item.taxable == true) {
      if (Number(appliedDiscount.amount) > 0) {
        // console.log("price: " + tempLineItem.price)
        // console.log("applied discount amount: " + appliedDiscount.amount)
        // console.log("applied discount value: " + appliedDiscount.value)
        var centsPrice = tempLineItem.price * tempLineItem.quantity / 100;
        taxSubtotal += Number(centsPrice - appliedDiscount.amount);
      } else {
        taxSubtotal += tempLineItem.price * tempLineItem.quantity / 100;
      }
    }

    orderReq.draft_order.line_items.push(tempLineItem);
  }); //check to see if EU tax line needs to be added

  if (wsgAddTaxes) {
    var taxRate = wsgData.shop_preferences.taxRate / 100; // console.log("tax subtotal: " + taxSubtotal)

    var tax = taxRate * taxSubtotal;
    tax = roundPrice(tax);

    if (tax > 0) {
      orderReq.draft_order.line_items.push({
        "title": "Tax",
        "price": Number(tax),
        "quantity": 1
      });
    }
  }

  return orderReq;
} //format discount for draft order


function calcWSGPrice(itemPrice, wsgPrice, qty) {
  var value, amount;
  var valueType = "fixed_amount"; //get how much the prod is discounted	

  value = (itemPrice - wsgPrice) / 100;

  if (typeof wsgShopCountry != "undefined") {
    if (wsgShopCountry == "Japan" || wsgShopCountry == "日本") {
      value = Math.round(value); //since Yen doesn't use decimals round this number   
    }
  } //calc total discount


  amount = value * qty;
  amount = roundPrice(amount);
  return {
    "title": "Wholesale Discount",
    "description": "Wholesale Price",
    "value": value,
    "value_type": valueType,
    "amount": amount
  };
} //clear cart and redirect back to draft order page


function finishUpdate(redirectUrl) {
  _wsgDiscounts.jQuery321.ajax({
    mthod: 'POST',
    url: '/cart/clear.js',
    dataType: 'json'
  }).always(function (data) {
    window.location.href = redirectUrl;
  });
} //=======================
//    update dom
//=======================


function updateProxyStyles() {
  //update button styles
  (0, _wsgDiscounts.jQuery321)('.wsg-submit-copy').addClass(wsgData.page_styles.btnClasses); //update margin

  var marginTopStr = "".concat(wsgData.page_styles.proxyMargin, "%");
  var marginBotStr = wsgData.page_styles.proxyMargin / 3 + '%';
  (0, _wsgDiscounts.jQuery321)('.wsg-proxy-container').css('margin-top', marginTopStr);
  (0, _wsgDiscounts.jQuery321)('.wsg-proxy-container').css('margin-bottom', marginBotStr);
}

function updateDom() {
  //net page
  (0, _wsgDiscounts.jQuery321)('#wsg-net-msg').html(wsgData.net_orders.netRedirect.message); //login

  (0, _wsgDiscounts.jQuery321)('#wsg-login-message').html(wsgData.customer.loginMessage); //account

  (0, _wsgDiscounts.jQuery321)('#wsg-account-message').html(wsgData.customer.accountMessage);
  (0, _wsgDiscounts.jQuery321)("#wsg-spof-link").html("<a href='/a/wsg/proxy/single-page-order' data-translation-selector='viewQuickLink'>View Quick Order Form</a>"); //signup pending

  (0, _wsgDiscounts.jQuery321)('#wsg-account-msg').html(wsgData.customer.redirectMessage); //international redirect

  (0, _wsgDiscounts.jQuery321)('#wsg-int-msg').html(wsgData.shipping_rates.internationalMsg.message);
}

function roundPrice(x) {
  return x.toFixed(2);
}

module.exports = exports;

},{"../../helpers/translations/translationFiles/":5,"../helpers/cart/calcDiscountsCart":10,"../wsg-discounts.js":26}],23:[function(require,module,exports){
"use strict";

var _wsgDiscounts = require("../wsg-discounts.js");

// Runs on product page for retail customers if "Enable backordered messages" is checked
// Displays simple backordered message to retail customers
exports.run = function () {
  //turn stockData from JSON into valid code
  wsgStockData = wsgStockData.slice(0, -1); //remove trailing comma

  wsgStockData = '{' + wsgStockData + '}';
  wsgStockData = JSON.parse(wsgStockData);
  addBackorderMsg(wsgCurrentVariant); //======================================  
  //          EVENT LISTENERS
  //======================================
  //event listener for variant selector

  (0, _wsgDiscounts.jQuery321)('select').change(function () {
    setTimeout(function () {
      wsgCurrentVariant = getwsgCurrentVariant();
      addBackorderMsg(wsgCurrentVariant);
    }, 750);
  }); //used for non-select inputs

  (0, _wsgDiscounts.jQuery321)('.wsg-option-click').on('click', function () {
    setTimeout(function () {
      wsgCurrentVariant = getwsgCurrentVariant();
      addBackorderMsg(wsgCurrentVariant);
    }, 750);
  }); //update backorder message if necessary

  function addBackorderMsg(variantId) {
    if (typeof variantId !== 'undefined') {
      if (wsgStockData[variantId].stock < 1 && wsgStockData[variantId].policy == 'continue' && wsgData.shop_preferences.autoBackorder) {
        //show backordered message
        (0, _wsgDiscounts.jQuery321)('#wsg-backordered-msg').css('visibility', 'visible');

        if (wsgStockData[variantId].shipDate !== '') {
          (0, _wsgDiscounts.jQuery321)('#wsg-backordered-msg').text('Backordered Item - Ships ' + wsgStockData[variantId].shipDate);
        } else {
          (0, _wsgDiscounts.jQuery321)('#wsg-backordered-msg').text('Backordered Item - will ship as available.');
        }

        (0, _wsgDiscounts.jQuery321)('#wsg-backordered-msg').css('margin-bottom', "1.0em");
        (0, _wsgDiscounts.jQuery321)('#wsg-backordered-msg').css('font-style', 'italic');
      } else {
        //hide backorder message
        (0, _wsgDiscounts.jQuery321)('#wsg-backordered-msg').css('visibility', 'hidden');
      }
    }
  } //get variant id from url  


  function getwsgCurrentVariant() {
    //extract current from url querystring
    var url = window.location.href;
    var begQuery = url.indexOf("?variant="); //if there is no querystring return the originally selected variant

    if (begQuery > 0) {
      //set variant id to querystring
      var variantId = url.substr(begQuery + 9); //check to see if there are any other querystrings and remove them

      var checkId = variantId.indexOf("?");

      if (checkId > 0) {
        //********** NEED TO CHECK IF THIS WORKS ********
        variantId = variantId.substring(0, checkId);
      }

      console.log('variantId' + variantId);
      return variantId;
    }

    console.log('wsgCurrentVariant' + wsgCurrentVariant);
    return wsgCurrentVariant;
  }
};

module.exports = exports;

},{"../wsg-discounts.js":26}],24:[function(require,module,exports){
"use strict";

var _wsgDiscounts = require("../wsg-discounts.js");

//=================================
//    script on Signup Proxy
//=================================
var alertEmailText;
var alertErrText; // if translations are running/not set to English, grab only the alert text needed for this page

if (wsgData.translations.language != 'english') {
  var emailAlert = require('../../helpers/translations/translationFiles/').files[wsgData.translations.language].alertEmailTaken;

  alertEmailText = emailAlert;

  var alertErrText = require('../../helpers/translations/translationFiles/').files[wsgData.translations.language].alertErrorProcessing;
} else {
  alertEmailText = "An account with this email already exists.  Please log in with this email address or contact us for assistance.";
  alertErrText = "There was an error processing your request.  Please verify all fields are correct and try again.\n\n";
}

exports.run = function () {
  // console.log('jquery in signup post req: ' + $.fn.jquery)
  //fill in any values from database
  (0, _wsgDiscounts.jQuery321)('#wsg-message').html(wsgData.customer.signup.message); // Initialize observers on country/province selectors

  try {
    new wsgShopify.CountryProvinceSelector('wsg-form-country', 'wsg-form-province', 'wsg-form-province');
  } catch (err) {
    console.log(err);
    console.log("Error populating Provinces list.  It is likely that no shipping zones are currently set up on this store.");
  }

  (0, _wsgDiscounts.jQuery321)('#wsg-signup').submit(function (e) {
    e.preventDefault();
    e.stopImmediatePropagation();
    var data = objectifyForm((0, _wsgDiscounts.jQuery321)(this).serializeArray());
    addCustomer(data);
  });

  function objectifyForm(formArray) {
    //serialize data function
    var returnArray = {};

    for (var i = 0; i < formArray.length; i++) {
      returnArray[formArray[i]['name']] = formArray[i]['value'];
    }

    returnArray.notes += "\nPhone: " + returnArray.phone;
    returnArray.notes += "\nVAT/Tax Id Number: " + returnArray.taxId;
    returnArray.notes += "\nWebsite: " + returnArray.website;
    delete returnArray.phone;
    delete returnArray.taxId;
    delete returnArray.website; //   delete returnArray.marketing;

    return returnArray;
  }

  function addCustomer(data) {
    console.log(wsgData.translations.enable);

    _wsgDiscounts.jQuery321.post('/a/wsg/customers/new', data).done(function (res) {
      window.location = res;
    }).fail(function (err) {
      console.log(err);

      if (err.status == 401) {
        alert(alertEmailText); // alert("An account with this email already exists.  Please log in with this email address or contact us for assistance.")
      } else {
        // var errText = 'There was an error processing your request.  Please verify all fields are correct and try again.\n\n';
        var errText = alertErrText;

        for (var key in err.responseJSON.errors) {
          errText += key;
          errText += " " + err.responseJSON.errors[key].join() + "\n";
        }

        alert(errText);
      }
    });
  }
};

module.exports = exports;

},{"../../helpers/translations/translationFiles/":5,"../wsg-discounts.js":26}],25:[function(require,module,exports){
"use strict";

var _wsgDiscounts = require("../wsg-discounts.js");

var _translations = require("../helpers/translations.js");

var discountCalculators = require('../helpers/discountCalculators');

var init = require('../helpers/initDiscounts');

//includes polyfill
if (!String.prototype.includes) {
  String.prototype.includes = function (search, start) {
    'use strict';

    if (typeof start !== 'number') {
      start = 0;
    }

    if (start + search.length > this.length) {
      return false;
    } else {
      return this.indexOf(search, start) !== -1;
    }
  };
}

exports.run = function () {
  var unsavedSpof = false; //array holding products that are renderd in dom

  var shownProducts = [];
  var quantitySel = ".quantity"; //hide excluded products & remove repeats

  var excludeTags = wsgData.shop_preferences.exclusions;
  wsgProdArraySP.forEach(function (product) {
    var removed = false; //remove products that have already been added

    for (var i = 0; i < shownProducts.length; i++) {
      if (shownProducts[i].prodData.id == product.prodData.id) {
        //duplicate found, remove this entry
        (0, _wsgDiscounts.jQuery321)('.wsgProdIndex-' + product.prodIndex).remove();
        removed = true;
        break;
      }
    }

    if (!removed) {
      //if still not removed add to shown products array
      shownProducts.push(product);
    }
  }); //go through all objects in array and calc wsg prices for each

  for (var i = 0; i < wsgProdArraySP.length; i++) {
    calcProdDiscount(wsgProdArraySP[i]);
  } //update quantities on spof from cart


  if (wsgCartItems.length > 0) {
    wsgCartItems.forEach(function (item) {
      var qtySelector = '.wsg-qty-' + item.variant_id + " input";
      (0, _wsgDiscounts.jQuery321)(qtySelector).val(item.quantity);
    });
  } //listener for cart success message


  (0, _wsgDiscounts.jQuery321)('.cart-success').hide();
  (0, _wsgDiscounts.jQuery321)(':input[type="number"]').change(function () {
    (0, _wsgDiscounts.jQuery321)('.cart-success').slideUp();
  }); //change quantity selector for pages that remove quantity class from input
  //$("#wsgSpofQtyFix").length is a temporary patch for themes where there is another field called "quantity"
  //will change this asap to not look for general .quantity, jsut dont have time to test atm...

  if ((0, _wsgDiscounts.jQuery321)(quantitySel).length == 0 || (0, _wsgDiscounts.jQuery321)("#wsgSpofQtyFix").length >= 1) {
    quantitySel = ".wsg-table input";
  }

  (0, _wsgDiscounts.jQuery321)(quantitySel).on('click', function () {
    //mark as changed to potentially account for 0 quantity
    //check for input above max
    (0, _wsgDiscounts.jQuery321)(this).data('updated', true);
    unsavedSpof = true;
  }); //only give stock warnings if Shopify manages inventory

  if (wsgData.shop_preferences.checkInventory == true) {
    (0, _wsgDiscounts.jQuery321)(quantitySel).on("change", function () {
      var onlyAlertText;
      var availableAlertText;

      if (wsgData.translations.language != "english") {
        var onlyAlert = require("../../helpers/translations/translationFiles/").files[wsgData.translations.language].only;

        onlyAlertText = onlyAlert;

        var availableAlert = require("../../helpers/translations/translationFiles/").files[wsgData.translations.language].available;

        availableAlertText = availableAlert;
      } else {
        onlyAlertText = "only ";
        availableAlertText = " available";
      }

      (0, _wsgDiscounts.jQuery321)(this).removeClass("over-max");
      var maxVal = (0, _wsgDiscounts.jQuery321)(this).prop("max") * 1;

      if (maxVal) {
        var notesSel = (0, _wsgDiscounts.jQuery321)(this).parentsUntil("tr").siblings(".wsg-notes");

        if ((0, _wsgDiscounts.jQuery321)(this).val() > maxVal) {
          (0, _wsgDiscounts.jQuery321)(notesSel).text(onlyAlertText + maxVal + availableAlertText);
          notesSel.addClass("max-note");
          (0, _wsgDiscounts.jQuery321)(this).addClass("over-max");
        } else {
          (0, _wsgDiscounts.jQuery321)(this).removeClass("over-max");
          (0, _wsgDiscounts.jQuery321)(notesSel).text("");
          (0, _wsgDiscounts.jQuery321)(notesSel).removeClass("max-note");
        }
      }
    });
  }

  (0, _wsgDiscounts.jQuery321)(window).on("beforeunload", function () {
    if (unsavedSpof) {
      return "You have unsaved data on the page.  Are you sure you want to leave?  Click 'Update Cart' to keep changes.";
    }
  }); //cart update

  (0, _wsgDiscounts.jQuery321)('.wsg-submit-copy').on('click', function (e) {
    unsavedSpof = false;
    e.preventDefault(); //disable button

    (0, _wsgDiscounts.jQuery321)(this).addClass('loading-btn');
    var updateQty = 0; //build updates object

    var updatesData = {
      updates: {}
    };
    (0, _wsgDiscounts.jQuery321)(quantitySel).each(function () {
      if ((0, _wsgDiscounts.jQuery321)(this).val() > 0 || (0, _wsgDiscounts.jQuery321)(this).data('updated')) {
        //get variant 
        var variantId = (0, _wsgDiscounts.jQuery321)(this).attr('id');
        updatesData.updates[variantId] = (0, _wsgDiscounts.jQuery321)(this).val();
        updateQty += Number((0, _wsgDiscounts.jQuery321)(this).val());
      }
    }); //remove updates_ keys

    for (var key in updatesData.updates) {
      if (key.indexOf('updates') !== -1) {
        delete updatesData.updates[key];
      }
    } //post update


    _wsgDiscounts.jQuery321.ajax({
      method: 'POST',
      url: '/cart/update.js',
      data: updatesData,
      dataType: 'json'
    }).done(function (cart, textStatus, jqXHR) {
      //display success message
      //let updateMsg = `Updated Cart with ${updateQty} Items`;
      // let updateMsg = "Updated Cart"
      // $('#wsg-update-msg').text(updateMsg);
      (0, _wsgDiscounts.jQuery321)('.cart-success').slideDown(); //update ajax cart if necessary

      if (typeof wsgRunAjax != "undefined") {
        if (wsgRunAjax) {
          updateWsgAjax();
        }
      } // console.log('done')

    }).fail(function (err) {
      console.log(err);
      var errorDescr = JSON.parse(err.responseText);
      var updateMsg = errorDescr.description;
      (0, _wsgDiscounts.jQuery321)('#wsg-update-msg').text(updateMsg);
      (0, _wsgDiscounts.jQuery321)('.cart-success').slideDown();
    }).always(function (res) {
      (0, _wsgDiscounts.jQuery321)('.wsg-submit-copy').removeClass('loading-btn');
    });
  }); //accordion functionality for collections

  var showTextCol = "[+]  View Collection";
  var hideTextCol = "[ - ]  Hide Collection";

  if (wsgData.single_page.collapseCollections) {
    //init
    (0, _wsgDiscounts.jQuery321)('.wsg-col-expand-btn').text(showTextCol);
    (0, _wsgDiscounts.jQuery321)('.wsg-col-accordion').next('div').toggleClass('wsg-variant-off'); //click listener

    (0, _wsgDiscounts.jQuery321)('.wsg-col-accordion').on('click', function () {
      (0, _wsgDiscounts.jQuery321)(this).next('div').slideToggle('wsg-variant-off');

      if ((0, _wsgDiscounts.jQuery321)(this).find('.wsg-col-expand-btn').text() == showTextCol) {
        (0, _wsgDiscounts.jQuery321)(this).find('.wsg-col-expand-btn').text(hideTextCol);
      } else {
        (0, _wsgDiscounts.jQuery321)(this).find('.wsg-col-expand-btn').text(showTextCol);
      }
    });
  } //accordion functionality for variants


  var showTextVar = "[+]  Show Variants";
  var hideTextVar = "[ - ]  Hide Variants";

  if (wsgData.translations.language != 'english') {
    showTextVar = require('../../helpers/translations/translationFiles/').files[wsgData.translations.language].text.spof.showVariants;
    hideTextVar = require('../../helpers/translations/translationFiles/').files[wsgData.translations.language].text.spof.hideVariants;
  }

  (0, _wsgDiscounts.jQuery321)('.wsg-product-accordion').nextAll().toggleClass('wsg-variant-off');
  (0, _wsgDiscounts.jQuery321)('.wsg-product-accordion').children('.wsg-show-variants').find('span').text(showTextVar).attr('data-translation-selector', 'showVariants');
  (0, _wsgDiscounts.jQuery321)('.wsg-product-accordion').on('click', function () {
    (0, _wsgDiscounts.jQuery321)(this).nextAll().toggleClass('wsg-variant-off'); //change text for toggle
    // if ($(this).children('.wsg-show-variants').find('span').text() == showTextVar){

    if ((0, _wsgDiscounts.jQuery321)(this).children('.wsg-show-variants').find('span').attr('data-translation-selector') == 'showVariants') {
      (0, _wsgDiscounts.jQuery321)(this).children(".wsg-show-variants").find("span").text(hideTextVar).attr("data-translation-selector", "hideVariants");
      ;
    } else {
      (0, _wsgDiscounts.jQuery321)(this).children(".wsg-show-variants").find("span").text(showTextVar).attr("data-translation-selector", "showVariants");
    } // run(wsgData.translations.language);

  }); //add message to top of page

  var message = "<p id='wsg-spof-msg'>" + wsgData.single_page.message + "</p>";
  message = message.replace(/\n/g, "<br>");
  (0, _wsgDiscounts.jQuery321)('#wsg-spof-msg').replaceWith(message); //adjust margin of nav

  var navMargin; // if(wsgData.single_page.message !== ''){
  //      navMargin = $('.wsg-spof-header').outerHeight(true) + 50;
  // } else {
  //      navMargin = $('.wsg-spof-header').outerHeight(true) + 20;
  // }

  navMargin = (0, _wsgDiscounts.jQuery321)('.wsg-spof-header').outerHeight(true) + 20;
  (0, _wsgDiscounts.jQuery321)('.spof-nav').css('margin-top', navMargin);
  (0, _wsgDiscounts.jQuery321)(document).ready(function () {
    (0, _wsgDiscounts.jQuery321)('#wsg-spof-loading').hide();
    (0, _wsgDiscounts.jQuery321)('#wsg-spof').removeClass('wsg-variant-off');
  }); //rearrange for mobile

  if ((0, _wsgDiscounts.jQuery321)(window).width() <= 768) {
    // do your stuff
    var nav = (0, _wsgDiscounts.jQuery321)(".spof-nav");
    (0, _wsgDiscounts.jQuery321)(".wsg-spof-header").after(nav);
    (0, _wsgDiscounts.jQuery321)(".wsg-spof-header").find("hr").hide();
  }
};

function calcProdDiscount(product) {
  // check if product is excluded from WSG 
  product.prodData.tags.forEach(function (prodTag) {//   wsgData.shop_preferences.exclusions.forEach(function(exclusionTag){
    //       if(exclusionTag === prodTag){
    //         var prodHideSelector = 'tbody.wsg-tbody-' + product.prodData.id;
    //         $(prodHideSelector).hide();
    //         return;
    //       }
    //   });
  }); //if no customer tags you can still display products

  if (wsgCustomerTags !== null && wsgCustomerTags.length > 0) {
    if (typeof wsgMoneyFormat != 'undefined') {
      wsgShopify.money_format = wsgMoneyFormat;
    } //get lowest prices and store in object


    var lowestPrices = init.initDiscount(product.prodData, wsgData, product.collectionsList);
    product.prices = lowestPrices; //cycle through each variant in obj and update dom with price

    _wsgDiscounts.jQuery321.each(product.prices, function (variantId, variantPrices) {
      var priceSelector = '.wsg-price-' + variantId;
      (0, _wsgDiscounts.jQuery321)(priceSelector).text(wsgShopify.formatMoney(variantPrices.wsgPrice));
    });
  }
}

module.exports = exports;

},{"../../helpers/translations/translationFiles/":5,"../helpers/discountCalculators":14,"../helpers/initDiscounts":15,"../helpers/translations.js":17,"../wsg-discounts.js":26}],26:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.jQuery321 = void 0;
//main file to serve to shops
var jQuery321; //use our own versions of option_selection.js and shopify_common.js

exports.jQuery321 = jQuery321;
var wsgShopify = wsgShopify || Shopify; //on older shops we used the Shopify CDN versions of these, so make our wsg version availible globally if so.

if (typeof window.wsgShopify == "undefined") {
  window.wsgShopify = setWindowScope();
}

function setWindowScope() {
  return wsgShopify;
}

if (typeof wsgData.translations == "undefined") {
  wsgData.translations = {
    language: "english",
    enable: false
  };
}

(function () {
  //==========================================
  //       Load proper version of jQuery 
  //==========================================
  var loadScript = function loadScript(url, callback) {
    var script = document.createElement("script");
    script.type = "text/javascript"; // If the browser is Internet Explorer.

    if (script.readyState) {
      script.onreadystatechange = function () {
        if (script.readyState == "loaded" || script.readyState == "complete") {
          script.onreadystatechange = null;
          callback();
        }
      }; // For any other browser.

    } else {
      script.onload = function () {
        callback();
      };
    }

    script.src = url;
    document.getElementsByTagName("head")[0].appendChild(script);
  }; //==========================================
  //        Run WSG Calculations
  //==========================================


  var product = require('./pages/product'),
      cart = require('./pages/cart'),
      collection = require('./pages/collection'),
      singlePage = require('./pages/singlePage'),
      signup = require('./pages/signup'),
      proxy = require('./pages/proxy'),
      retailProduct = require('./pages/retailProduct'),
      ajax = require("./pages/ajax"),
      cartListener = require('./helpers/cart/observer'),
      translations = require('./helpers/translations'),
      exclusions = require('./helpers/inventory/exclusions');

  var runTestMode = false;

  var runWsg = function runWsg($) {
    // console.log('jquery in runWsg: ' + $.fn.jquery)
    //check if shop is in db, if not don't run script
    $.ajax({
      url: '/a/wsg/proxy/verify-shop',
      method: 'GET'
    }).done(function (res) {
      //enter test mode if querystring wsgTestMode is present.  
      if (window.location.href.indexOf("wsgTestMode") > -1) {
        //set varialbes to trigger $1.11 discount
        runTestMode = true;
        wsgData.discounts.push({
          amount: 111,
          collectionId: null,
          discountType: "fixed",
          id: "wsgTestModeDiscount",
          product_id: 0,
          scope: "all",
          tags: "wsgTestTag",
          title: "",
          variants: [],
          _id: "wsgTestModeDiscount"
        });
        wsgCustomerTags = ["wsgTestTag"];
        $("a").each(function () {
          //change all links on page to include test mode querystring
          var url = $(this).attr("href");

          if (typeof url != "undefined") {
            if (url.length) {
              if (url.indexOf("?") > -1) {
                url += "&wsgTestMode";
              } else {
                url += "?wsgTestMode";
              }

              $(this).attr("href", url);
            }
          }
        });
        console.log("WSG Test Mode - all prices should be $1.11");
      }

      $('document').ready(function () {
        //shop found in db - run wsg
        if (wsgRunSignup === true) {
          signup.run();
        }

        if (typeof wsgRunProxy !== 'undefined') {
          if (wsgRunProxy === true) {
            proxy.run();
          }
        }

        if (wsgRunSinglePage === true) {
          singlePage.run();
        }

        if (wsgRunProduct == true && wsgCustomerTags == null && wsgData.shop_preferences.autoBackorder) {
          //checks inventory for retail pages
          retailProduct.run();
        }

        var tagsMatch;

        if (wsgCustomerTags && typeof wsgActive !== 'undefined' && wsgCustomerTags.length > 0) {
          //check to see if this is a valid wsg customer
          if (typeof isWsgCustomer != "undefined") {
            //stores as of 4.25 have this variable in wsg-header to avoid another loop
            if (isWsgCustomer == true) {
              tagsMatch = true;
            } else {
              tagsMatch = false;
            }
          } else {
            //legacy shops need to check to see if tags match, can also work in another loop that uses wsgData.activeTags for 4.0+ shops
            for (var i = 0; i < wsgData.discounts.length; i++) {
              for (var k = 0; k < wsgCustomerTags.length; k++) {
                if (wsgData.discounts[i].tags == wsgCustomerTags[k]) {
                  //tags match
                  tagsMatch = true;
                  break;
                }
              }

              if (tagsMatch) {
                break;
              }
            }
          }

          if (runTestMode == true) {
            tagsMatch = true;
          } //run wholesale functions


          if (wsgActive == true && tagsMatch) {
            if (wsgRunCart === true) {
              cart.run();
            }

            if (wsgRunProduct === true) {
              product.run();
            }

            if (wsgRunCollection === true) {
              collection.run();
            }

            if ($("#wsgReloadPrices_Window").length > 0) {
              //optionally reload prices on window load event
              $(window).on("load", function () {
                setTimeout(function () {
                  if (wsgRunProduct) {
                    product.run();
                  }

                  if (wsgRunCollection) {
                    collection.run();
                  }
                }, 900);
              });
            } //hide/show dom elements


            $('.hideWsg').hide();
            $(".wsg-ws-only").show();

            if (typeof hideDomElements != "undefined") {
              hideDomElements.push(".shopify-payment-button"); //hide all addl payment btns

              hideDomElements.forEach(function (element) {
                $(element).hide();
                setTimeout(function () {
                  $(element).hide();
                }, 1500);
              });
            } //AJAX Cart 


            if (typeof wsgRunAjax !== "undefined") {
              if (wsgRunAjax == true) {
                ajax.run(); //as of v4.1 (06/01/2019) this has veen moved out of wsg-header

                if (wsgVersion >= 4.1) {
                  //on newer shops we moved this out of wsg-header and into here so we can use custom trigger
                  if (typeof checkAjaxChange == "undefined") {
                    var checkAjaxChange = ajax.wsgCheckAjaxChange;
                    var updateWsgAjax = ajax.updateWsgAjaxInternal;
                  }

                  setTimeout(function () {
                    updateWsgAjax();
                  }, 750); //listeners to update ajax cart

                  $(window).on("mouseup", function () {
                    checkAjaxChange();
                  });
                  $(window).on("touchend", function () {
                    checkAjaxChange();
                  });
                  $("form").on("keyup", function () {
                    checkAjaxChange();
                  });
                  $(".wsgForceAjax").on("click", function () {
                    updateWsgAjax();
                  });
                }
              }
            } //end ajax section
            //----- general listeners for reloading the oage ------


            $('.wsgForceReload').on('click', function () {
              setTimeout(function () {
                window.location.reload(true);
              }, 100);
            });
            $('.wsgRedirectCart').on('click', function () {
              setTimeout(function () {
                window.location.href = "/cart";
              }, 650);
            });
            $('.wsgReload').on('click', function () {
              setTimeout(function () {
                window.location.reload(true);
              }, 500);
            });
            $(".wsgGeneralChange").on("change", function () {
              setTimeout(function () {
                window.location.reload(true);
              }, 500);
            });
            sessionStorage.removeItem('wsgCartChecked'); //remove cart checked cookie in case they log out again.
          } else {
            tagsMatch = false; //non-ws customer
          }
        } else {
          tagsMatch = false; //no customer tags or wsg not active
        }

        if (tagsMatch == false) {
          //-----------------------------------
          //things to run for non-wsg customers 
          //-----------------------------------
          if (typeof wsgBetaRestrictedCart != "undefined") {
            //check for wholesale-only items in cart
            if (!sessionStorage.getItem("wsgCartChecked")) {
              exclusions.checkCartItems("retail").then(function (restrictedItems) {
                exclusions.checkRedirect(restrictedItems);
              }).catch(function (exclusionsErr) {
                console.log(exclusionsErr);
              });
            } //             else {
            //               console.log("wsgCartChecked cookie found, not checking cart")
            //             }          

          } //--- Legacy store DOM updates ---


          $('#wsg-spof-link').hide();
          $('#wsg-account-message').hide();

          if (wsgRunProduct && wsgData.shop_preferences.autoBackorder) {
            //checks inventory for retail pages and updates message only on legacy shops
            if ($("#wsgStockData").length > 0) {
              retailProduct.run();
            }
          }
        }

        if (res.translation && res.language != 'english') {
          translations.run(res.languageJson);
        }
      }); //end document ready
    }) //end verify shop .done()
    .fail(function (res) {//Wholesale Gorilla Uninstalled
    });
  };

  if (typeof jQuery === 'undefined' || parseFloat(jQuery.fn.jquery) < 3.0) {
    loadScript("/a/wsg/proxy/wsg-jquery", function () {
      exports.jQuery321 = jQuery321 = jQuery.noConflict(true);
      runWsg(jQuery321);
    });
  } else {
    exports.jQuery321 = jQuery321 = jQuery;
    runWsg(jQuery);
  }
})(); //export peroper version of jQuery

},{"./helpers/cart/observer":12,"./helpers/inventory/exclusions":16,"./helpers/translations":17,"./pages/ajax":18,"./pages/cart":19,"./pages/collection":20,"./pages/product":21,"./pages/proxy":22,"./pages/retailProduct":23,"./pages/signup":24,"./pages/singlePage":25}]},{},[26]);
